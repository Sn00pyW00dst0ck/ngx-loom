var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/DagreLayout.html",[0,0.351,1,1.347]],["body/classes/DagreLayout.html",[0,0.23,1,1.341,2,0.883,3,0.527,4,0.527,5,0.44,6,0.73,7,0.883,8,0.293,9,0.669,10,3.215,11,2.502,12,2.373,13,2.373,14,2.373,15,1.457,16,1.622,17,1.457,18,1.943,19,1.64,20,1.64,21,0.069,22,1.795,23,1.647,24,0.903,25,1.647,26,1.647,27,1.948,28,2.334,29,1.962,30,2.651,31,1.457,32,2.651,33,2.373,34,1.812,35,2.373,36,2.373,37,1.607,38,2.851,39,2.17,40,2.851,41,1.647,42,1.647,43,1.647,44,1.647,45,0.969,46,2.132,47,0.843,48,0.801,49,1.291,50,2.373,51,1.152,52,0.44,53,2.17,54,1.341,55,1.057,56,0.809,57,1.082,58,1.057,59,1.057,60,1.057,61,1.057,62,1.057,63,1.057,64,1.057,65,1.057,66,1.943,67,1.607,68,0.883,69,0.527,70,1.057,71,1.057,72,1.057,73,1.057,74,1.057,75,1.057,76,1.057,77,1.057,78,1.291,79,1.291,80,0.293,81,1.164,82,1.962,83,1.291,84,1.291,85,1.962,86,1.291,87,1.291,88,1.291,89,1.291,90,1.291,91,0.627,92,1.962,93,2.17,94,1.457,95,3.413,96,2.373,97,1.291,98,1.291,99,1.291,100,1.291,101,1.291,102,1.291,103,2.373,104,2.373,105,1.291,106,1.291,107,0.627,108,1.291,109,0.627,110,1.291,111,1.291,112,0.627,113,1.291,114,0.627,115,1.291,116,2.373,117,1.291,118,1.291,119,1.291,120,1.291,121,1.291,122,1.341,123,1.291,124,0.627,125,1.291,126,1.291,127,1.962,128,1.291,129,1.291,130,1.291,131,1.962,132,2.373,133,1.291,134,1.291,135,1.291,136,1.291,137,1.291,138,1.291,139,1.291,140,1.291,141,1.291,142,1.291,143,1.291,144,1.291,145,1.291,146,1.291,147,1.291,148,1.291,149,1.962,150,1.291,151,1.291,152,1.962,153,1.291,154,1.291,155,1.291,156,1.291,157,1.291,158,1.291,159,1.291,160,1.291,161,1.291,162,1.291,163,1.291,164,1.291,165,1.291,166,1.962,167,1.962,168,0.627,169,1.291,170,1.291,171,0.034,172,0.034]],["title/interfaces/DagreSettings.html",[27,1.347,80,0.447]],["body/interfaces/DagreSettings.html",[0,0.223,1,0.856,3,0.511,4,0.511,5,0.427,6,0.284,7,0.856,8,0.284,9,0.653,10,1.917,12,1.252,13,1.252,14,1.252,15,0.93,16,0.856,17,1.365,18,1.025,21,0.069,24,1.154,27,1.783,28,2.672,29,1.252,30,2.966,31,1.266,32,2.966,33,2.812,34,1.31,35,2.812,36,2.812,37,1.025,38,3.087,39,1.569,40,3.087,45,0.95,46,2.176,47,0.833,48,0.79,49,1.252,50,2.329,51,1.13,52,0.427,53,2.136,54,1.31,55,1.025,56,0.889,57,1.065,58,1.025,59,1.025,60,1.025,61,1.025,62,1.025,63,1.025,64,1.025,65,1.025,66,2.428,67,2.136,68,0.856,69,0.511,70,1.025,71,1.025,72,1.025,73,1.025,74,1.025,75,1.025,76,1.025,77,1.025,78,1.917,79,1.917,80,0.284,81,1.449,82,2.812,83,2.329,84,2.329,85,2.812,86,2.329,87,2.329,88,2.329,89,2.329,90,2.329,91,1.13,92,2.966,93,2.136,94,1.439,95,3.387,96,2.329,97,1.252,98,1.252,99,1.252,100,1.252,101,1.252,102,1.252,103,2.329,104,2.329,105,1.252,106,1.252,107,0.608,108,1.252,109,0.608,110,1.252,111,1.252,112,0.608,113,1.252,114,0.608,115,1.252,116,2.329,117,1.252,118,1.252,119,1.252,120,1.252,121,1.252,122,1.31,123,1.252,124,0.608,125,1.252,126,1.252,127,1.917,128,1.252,129,1.252,130,1.252,131,1.917,132,2.329,133,1.252,134,1.252,135,1.252,136,1.252,137,1.252,138,1.252,139,1.252,140,1.252,141,1.252,142,1.252,143,1.252,144,1.252,145,1.252,146,1.252,147,1.252,148,1.252,149,1.917,150,1.252,151,1.252,152,1.917,153,1.252,154,1.252,155,1.252,156,1.252,157,1.252,158,1.252,159,1.252,160,1.252,161,1.252,162,1.252,163,1.252,164,1.252,165,1.252,166,1.917,167,1.917,168,0.608,169,1.252,170,1.252,171,0.033,172,0.033,173,0.856,174,0.608,175,3.032]],["title/classes/Edge.html",[0,0.351,48,0.554]],["body/classes/Edge.html",[0,0.362,2,0.924,3,0.552,4,1.108,5,0.461,6,0.74,8,0.307,9,0.692,15,1.839,17,0.986,19,1.758,20,1.758,21,0.069,22,1.823,24,1.111,31,0.986,45,0.829,47,0.993,48,1.037,51,1.184,52,0.461,56,1.041,57,1.108,69,0.552,80,0.554,81,1.427,91,0.986,94,0.986,107,1.317,109,1.317,112,0.986,114,0.986,124,1.184,168,0.656,171,0.035,172,0.035,174,0.656,176,0.778,177,1.668,178,1.169,179,1.184,180,1.668,181,2.358,182,2.166,183,1.988,184,1.988,185,1.668,186,1.668,187,2.478,188,1.876,189,1.725,190,1.668,191,1.404,192,2.088,193,1.668,194,1.668,195,1.725,196,1.668,197,1.725,198,1.668,199,1.389,200,1.169,201,1.353,202,1.725,203,1.389,204,1.169,205,1.389,206,1.725,207,1.389,208,1.725,209,1.389,210,1.725,211,0.986,212,0.924,213,0.924,214,0.924,215,0.924,216,1.389,217,0.924,218,0.924,219,1.184,220,0.924,221,0.924,222,0.778,223,1.404,224,0.924,225,0.924,226,0.924,227,0.924,228,0.778,229,0.656,230,0.924,231,0.924,232,0.924,233,0.924,234,0.924,235,0.552,236,0.924,237,0.924,238,0.924]],["title/interfaces/Layout.html",[80,0.447,219,0.957]],["body/interfaces/Layout.html",[0,0.387,3,0.605,4,0.888,5,0.505,6,0.585,8,0.337,9,0.742,15,1.729,16,1.487,17,1.534,18,1.782,21,0.069,22,1.252,24,0.878,31,1.056,45,0.888,47,1.027,48,1.054,51,1.467,52,0.505,56,1.077,57,1.159,69,0.605,80,0.644,81,1.454,91,0.72,93,1.782,94,1.534,107,1.378,109,1.378,112,1.056,114,1.056,124,1.251,168,0.72,171,0.037,172,0.037,173,1.014,174,0.72,175,2.325,176,0.853,177,1.487,178,0.853,179,1.056,180,1.487,181,2.16,182,1.94,183,1.487,184,1.487,185,1.014,186,1.014,187,2.374,188,1.818,190,1.487,191,1.252,192,2.066,193,1.487,194,1.487,196,1.487,198,1.487,199,1.014,200,0.853,203,1.014,204,0.853,205,1.014,207,1.014,209,1.014,211,1.056,212,1.014,213,1.014,214,1.014,215,1.014,216,1.487,217,1.014,218,1.014,219,1.534,220,1.487,221,1.487,222,1.252,223,1.483,224,1.487,225,1.487,226,1.014,227,1.014,228,0.853,229,0.72,230,1.014,231,1.014,232,1.014,233,1.014,234,1.014,235,0.605,236,1.014,237,1.014,238,1.014,239,1.782,240,1.891,241,2.176,242,2.176,243,2.176,244,1.891]],["title/interfaces/Matrix.html",[80,0.447,235,0.805]],["body/interfaces/Matrix.html",[0,0.393,3,0.619,4,0.903,5,0.517,6,0.344,8,0.344,9,0.753,15,1.737,17,1.073,21,0.069,24,1.085,31,1.073,45,0.903,47,0.994,48,1.005,51,1.267,52,0.517,56,1.039,57,1.171,69,1.171,80,0.592,81,1.557,91,0.736,94,1.073,107,1.392,109,1.392,112,1.073,114,1.073,124,1.267,168,1.392,171,0.038,172,0.038,173,1.036,174,0.736,176,0.872,177,1.511,178,0.872,179,1.073,180,1.511,181,2.176,182,1.961,183,1.511,184,1.511,185,1.036,186,1.036,187,2.387,188,1.832,190,1.511,191,1.272,192,1.961,193,1.511,194,1.511,196,1.511,198,1.511,199,1.036,200,0.872,203,1.036,204,0.872,205,1.036,207,1.036,209,1.036,211,1.073,212,1.036,213,1.036,214,1.036,215,1.036,216,1.784,217,1.036,218,1.036,219,1.267,220,1.036,221,1.036,222,0.872,223,1.502,224,1.036,225,1.036,226,1.511,227,1.511,228,1.272,229,1.073,230,1.511,231,1.511,232,1.511,233,1.511,234,1.511,235,0.903,236,1.961,237,1.961,238,1.961]],["title/directives/MouseWheelDirective.html",[245,1.347,246,1.614]],["body/directives/MouseWheelDirective.html",[0,0.268,3,0.615,4,0.615,5,0.514,6,0.791,8,0.342,21,0.068,22,1.974,24,1.083,39,1.803,45,0.615,52,0.514,54,1.505,57,0.615,122,1.505,171,0.038,172,0.038,174,1.068,175,2.687,211,0.731,223,1.646,239,1.803,241,3.282,242,3.282,243,2.861,245,1.955,246,1.803,247,1.922,248,1.507,249,2.808,250,2.808,251,4.053,252,4.053,253,3.365,254,2.808,255,2.808,256,1.922,257,2.808,258,4.675,259,2.808,260,2.808,261,2.808,262,2.808,263,2.808,264,2.808,265,3.317,266,3.317,267,2.808,268,2.808,269,2.808,270,3.881,271,1.922,272,3.648,273,2.808,274,3.648,275,2.808,276,1.922,277,2.808,278,3.317,279,4.861,280,2.808,281,4.376,282,3.317,283,2.808,284,3.317,285,2.808,286,3.648,287,2.808,288,1.922,289,2.808,290,2.808,291,2.808,292,2.808,293,2.808,294,2.808,295,3.648,296,2.808,297,3.317,298,2.808,299,2.808,300,2.808,301,2.808,302,2.808,303,2.601,304,1.922,305,3.317,306,2.808,307,1.922,308,1.922,309,1.922,310,3.317,311,1.922,312,1.507,313,1.922,314,1.922,315,1.922,316,1.922]],["title/classes/Node.html",[0,0.351,47,0.554]],["body/classes/Node.html",[0,0.368,2,0.948,3,0.566,4,0.845,5,0.473,6,0.7,8,0.315,9,0.706,15,1.821,17,1.005,19,1.692,20,1.692,21,0.069,22,1.692,24,1.089,31,1.334,45,0.845,47,1.035,48,0.987,51,1.203,52,0.473,56,1.051,57,1.122,69,0.566,80,0.562,81,1.435,91,0.673,94,1.005,107,1.497,109,1.497,112,1.203,114,1.203,124,1.551,168,0.673,171,0.035,172,0.035,174,0.673,176,0.798,177,1.693,178,0.798,179,1.203,180,1.693,181,2.295,182,2.184,183,1.415,184,1.415,185,0.948,186,0.948,187,2.45,188,1.89,190,1.693,191,1.426,192,2.01,193,1.693,194,1.693,196,1.693,198,1.693,199,0.948,200,0.798,201,2.071,203,0.948,204,0.798,205,0.948,207,0.948,209,0.948,211,1.334,212,1.415,213,1.415,214,1.693,215,1.415,216,1.693,217,1.415,218,1.693,219,1.203,220,0.948,221,0.948,222,0.798,223,1.426,224,0.948,225,0.948,226,0.948,227,0.948,228,0.798,229,0.673,230,0.948,231,0.948,232,0.948,233,0.948,234,0.948,235,0.566,236,0.948,237,0.948,238,0.948,317,1.769,318,1.769,319,1.769,320,1.769,321,1.769]],["title/coverage.html",[322,2.659]],["body/coverage.html",[0,0.604,1,1.734,5,0.864,6,0.868,7,2.139,21,0.066,24,0.864,27,1.734,34,2.319,37,2.077,47,0.712,48,0.712,80,0.77,122,1.734,171,0.054,172,0.054,176,2.039,211,1.231,219,1.231,229,1.231,235,1.036,245,1.734,246,2.077,248,2.537,322,2.537,323,2.537,324,3.235,325,3.235,326,3.235,327,3.235,328,3.235,329,3.235,330,3.235,331,3.235,332,3.235,333,3.235,334,3.235,335,3.235,336,3.235,337,3.235,338,3.235,339,3.235,340,2.537,341,3.235,342,2.537,343,3.235,344,3.235,345,3.235]],["title/dependencies.html",[346,1.662,347,2.363]],["body/dependencies.html",[21,0.068,46,1.833,52,0.914,171,0.055,172,0.055,188,1.543,235,1.095,347,2.683,348,3.421,349,4.888,350,3.421,351,3.421,352,3.421,353,4.129,354,4.129,355,3.421,356,3.421,357,3.421,358,3.421,359,3.421,360,3.421,361,3.421,362,3.421,363,3.421,364,3.421,365,3.421,366,3.421,367,3.421,368,3.421]],["title/miscellaneous/enumerations.html",[369,1.136,370,2.363]],["body/miscellaneous/enumerations.html",[6,0.598,7,1.8,8,0.598,20,2.214,21,0.067,28,2.622,46,2.189,53,2.622,54,2.189,55,2.157,56,1.091,58,2.157,59,2.157,60,2.157,61,2.157,62,2.157,63,2.157,64,2.157,65,2.157,66,2.157,67,2.622,68,1.8,69,1.075,70,2.157,71,2.157,72,2.157,73,2.157,74,2.157,75,2.157,76,2.157,77,2.157,171,0.055,172,0.055,369,1.8,370,2.634,371,4.084]],["title/index.html",[8,0.377,372,2.119,373,2.119]],["body/index.html",[16,1.952,19,1.429,21,0.049,34,1.219,47,0.697,48,0.697,56,1.106,68,1.219,171,0.042,172,0.042,178,1.429,179,1.386,191,1.429,200,1.429,204,1.026,222,1.026,228,2.163,239,1.461,253,1.784,303,1.784,323,3.517,374,4.738,375,3.167,376,2.275,377,2.275,378,2.275,379,2.275,380,2.275,381,2.275,382,3.167,383,2.275,384,2.275,385,2.275,386,2.275,387,4.141,388,3.167,389,2.275,390,2.275,391,3.167,392,4.287,393,2.275,394,2.275,395,2.275,396,2.275,397,3.643,398,3.167,399,2.275,400,2.275,401,3.167,402,2.275,403,2.275,404,2.275,405,2.275,406,2.275,407,2.275,408,2.275,409,2.275,410,2.275,411,2.275,412,2.275,413,2.275,414,3.939,415,3.167,416,2.275,417,2.275,418,2.275,419,2.275,420,2.275,421,2.275,422,2.275,423,2.275,424,2.275,425,2.275,426,2.275,427,3.643,428,3.167,429,3.167,430,4.613,431,4.485,432,2.275,433,4.287,434,3.939,435,2.275,436,2.275,437,3.167,438,2.275,439,4.398,440,2.275,441,2.275,442,3.167,443,2.275,444,3.167,445,2.275,446,2.275,447,2.275,448,2.275,449,2.275,450,2.275,451,2.275,452,2.275,453,3.167,454,2.275,455,2.275,456,3.939,457,3.939,458,3.939,459,2.275,460,3.167,461,3.167,462,2.275,463,2.275,464,2.275,465,2.275,466,2.275,467,2.275,468,2.275,469,2.275,470,2.275,471,2.275,472,2.275,473,2.275,474,2.275,475,2.275,476,2.275,477,2.275,478,2.275,479,1.784,480,2.275]],["title/modules.html",[481,2.659]],["body/modules.html",[21,0.06,171,0.06,172,0.06,481,3.076]],["title/overview.html",[482,2.659]],["body/overview.html",[2,2.053,21,0.059,171,0.059,172,0.059,173,2.053,229,1.458,245,2.053,312,3.462,482,3.004,483,4.414]],["title/properties.html",[9,0.805,346,1.662]],["body/properties.html",[9,1.039,21,0.063,171,0.06,172,0.06,479,3.048,484,3.887]],["title/miscellaneous/variables.html",[369,1.136,485,2.363]],["body/miscellaneous/variables.html",[6,0.635,8,0.635,19,1.61,20,2.182,21,0.066,81,1.495,171,0.057,172,0.057,179,1.358,340,2.799,342,3.322,369,1.913,485,2.799,486,3.57,487,4.236,488,4.672,489,3.57,490,4.236]]],"invertedIndex":[["",{"_index":21,"title":{},"body":{"classes/DagreLayout.html":{},"interfaces/DagreSettings.html":{},"classes/Edge.html":{},"interfaces/Layout.html":{},"interfaces/Matrix.html":{},"directives/MouseWheelDirective.html":{},"classes/Node.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":211,"title":{},"body":{"classes/Edge.html":{},"interfaces/Layout.html":{},"interfaces/Matrix.html":{},"directives/MouseWheelDirective.html":{},"classes/Node.html":{},"coverage.html":{}}}],["0.0.0",{"_index":484,"title":{},"body":{"properties.html":{}}}],["0.14.3",{"_index":368,"title":{},"body":{"dependencies.html":{}}}],["0.8.5",{"_index":359,"title":{},"body":{"dependencies.html":{}}}],["0/8",{"_index":332,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":312,"title":{},"body":{"directives/MouseWheelDirective.html":{},"overview.html":{}}}],["1/1",{"_index":343,"title":{},"body":{"coverage.html":{}}}],["1/12",{"_index":334,"title":{},"body":{"coverage.html":{}}}],["1/7",{"_index":331,"title":{},"body":{"coverage.html":{}}}],["10/10",{"_index":339,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":34,"title":{},"body":{"classes/DagreLayout.html":{},"interfaces/DagreSettings.html":{},"coverage.html":{},"index.html":{}}}],["14",{"_index":330,"title":{},"body":{"coverage.html":{}}}],["17",{"_index":376,"title":{},"body":{"index.html":{}}}],["17.3.0",{"_index":349,"title":{},"body":{"dependencies.html":{}}}],["17.3.6",{"_index":480,"title":{},"body":{"index.html":{}}}],["2.16.1",{"_index":364,"title":{},"body":{"dependencies.html":{}}}],["2.3.0",{"_index":366,"title":{},"body":{"dependencies.html":{}}}],["2/4",{"_index":329,"title":{},"body":{"coverage.html":{}}}],["20",{"_index":31,"title":{},"body":{"classes/DagreLayout.html":{},"interfaces/DagreSettings.html":{},"classes/Edge.html":{},"interfaces/Layout.html":{},"interfaces/Matrix.html":{},"classes/Node.html":{}}}],["3",{"_index":483,"title":{},"body":{"overview.html":{}}}],["38/41",{"_index":338,"title":{},"body":{"coverage.html":{}}}],["5.0.7",{"_index":360,"title":{},"body":{"dependencies.html":{}}}],["50",{"_index":37,"title":{},"body":{"classes/DagreLayout.html":{},"interfaces/DagreSettings.html":{},"coverage.html":{}}}],["6/6",{"_index":328,"title":{},"body":{"coverage.html":{}}}],["7.8.0",{"_index":362,"title":{},"body":{"dependencies.html":{}}}],["7.8.5",{"_index":358,"title":{},"body":{"dependencies.html":{}}}],["7/8",{"_index":327,"title":{},"body":{"coverage.html":{}}}],["8",{"_index":333,"title":{},"body":{"coverage.html":{}}}],["87",{"_index":326,"title":{},"body":{"coverage.html":{}}}],["92",{"_index":337,"title":{},"body":{"coverage.html":{}}}],["ability",{"_index":392,"title":{},"body":{"index.html":{}}}],["above",{"_index":290,"title":{},"body":{"directives/MouseWheelDirective.html":{}}}],["actually",{"_index":221,"title":{},"body":{"classes/Edge.html":{},"interfaces/Layout.html":{},"interfaces/Matrix.html":{},"classes/Node.html":{}}}],["acyclicer",{"_index":82,"title":{},"body":{"classes/DagreLayout.html":{},"interfaces/DagreSettings.html":{}}}],["add",{"_index":249,"title":{},"body":{"directives/MouseWheelDirective.html":{}}}],["align",{"_index":66,"title":{},"body":{"classes/DagreLayout.html":{},"interfaces/DagreSettings.html":{},"miscellaneous/enumerations.html":{}}}],["alignment",{"_index":67,"title":{},"body":{"classes/DagreLayout.html":{},"interfaces/DagreSettings.html":{},"miscellaneous/enumerations.html":{}}}],["allows",{"_index":406,"title":{},"body":{"index.html":{}}}],["angular",{"_index":375,"title":{},"body":{"index.html":{}}}],["angular/animations",{"_index":348,"title":{},"body":{"dependencies.html":{}}}],["angular/common",{"_index":350,"title":{},"body":{"dependencies.html":{}}}],["angular/compiler",{"_index":351,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":52,"title":{},"body":{"classes/DagreLayout.html":{},"interfaces/DagreSettings.html":{},"classes/Edge.html":{},"interfaces/Layout.html":{},"interfaces/Matrix.html":{},"directives/MouseWheelDirective.html":{},"classes/Node.html":{},"dependencies.html":{}}}],["angular/forms",{"_index":352,"title":{},"body":{"dependencies.html":{}}}],["angular/platform",{"_index":353,"title":{},"body":{"dependencies.html":{}}}],["angular/router",{"_index":356,"title":{},"body":{"dependencies.html":{}}}],["applicaiton",{"_index":436,"title":{},"body":{"index.html":{}}}],["application",{"_index":431,"title":{},"body":{"index.html":{}}}],["apply",{"_index":133,"title":{},"body":{"classes/DagreLayout.html":{},"interfaces/DagreSettings.html":{}}}],["args",{"_index":165,"title":{},"body":{"classes/DagreLayout.html":{},"interfaces/DagreSettings.html":{}}}],["arguments",{"_index":278,"title":{},"body":{"directives/MouseWheelDirective.html":{}}}],["arrow",{"_index":123,"title":{},"body":{"classes/DagreLayout.html":{},"interfaces/DagreSettings.html":{}}}],["auto",{"_index":412,"title":{},"body":{"index.html":{}}}],["available",{"_index":428,"title":{},"body":{"index.html":{}}}],["b",{"_index":236,"title":{},"body":{"classes/Edge.html":{},"interfaces/Layout.html":{},"interfaces/Matrix.html":{},"classes/Node.html":{}}}],["bind",{"_index":409,"title":{},"body":{"index.html":{}}}],["boolean",{"_index":92,"title":{},"body":{"classes/DagreLayout.html":{},"interfaces/DagreSettings.html":{}}}],["bottom_to_tom",{"_index":64,"title":{},"body":{"classes/DagreLayout.html":{},"interfaces/DagreSettings.html":{},"miscellaneous/enumerations.html":{}}}],["browser",{"_index":354,"title":{},"body":{"dependencies.html":{}}}],["bt",{"_index":65,"title":{},"body":{"classes/DagreLayout.html":{},"interfaces/DagreSettings.html":{},"miscellaneous/enumerations.html":{}}}],["build",{"_index":429,"title":{},"body":{"index.html":{}}}],["build:demo:dev",{"_index":432,"title":{},"body":{"index.html":{}}}],["build:demo:prod",{"_index":435,"title":{},"body":{"index.html":{}}}],["build:loom:dev",{"_index":438,"title":{},"body":{"index.html":{}}}],["build:loom:prod",{"_index":440,"title":{},"body":{"index.html":{}}}],["building",{"_index":451,"title":{},"body":{"index.html":{}}}],["builds",{"_index":433,"title":{},"body":{"index.html":{}}}],["built",{"_index":447,"title":{},"body":{"index.html":{}}}],["c",{"_index":69,"title":{},"body":{"classes/DagreLayout.html":{},"interfaces/DagreSettings.html":{},"classes/Edge.html":{},"interfaces/Layout.html":{},"interfaces/Matrix.html":{},"classes/Node.html":{},"miscellaneous/enumerations.html":{}}}],["calculations",{"_index":231,"title":{},"body":{"classes/Edge.html":{},"interfaces/Layout.html":{},"interfaces/Matrix.html":{},"classes/Node.html":{}}}],["cd",{"_index":424,"title":{},"body":{"index.html":{}}}],["center",{"_index":68,"title":{},"body":{"classes/DagreLayout.html":{},"interfaces/DagreSettings.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["chrome",{"_index":284,"title":{},"body":{"directives/MouseWheelDirective.html":{}}}],["class",{"_index":0,"title":{"classes/DagreLayout.html":{},"classes/Edge.html":{},"classes/Node.html":{}},"body":{"classes/DagreLayout.html":{},"interfaces/DagreSettings.html":{},"classes/Edge.html":{},"interfaces/Layout.html":{},"interfaces/Matrix.html":{},"directives/MouseWheelDirective.html":{},"classes/Node.html":{},"coverage.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/DagreLayout.html":{},"classes/Edge.html":{},"classes/Node.html":{},"overview.html":{}}}],["cli",{"_index":478,"title":{},"body":{"index.html":{}}}],["clicked",{"_index":411,"title":{},"body":{"index.html":{}}}],["clone",{"_index":421,"title":{},"body":{"index.html":{}}}],["command",{"_index":386,"title":{},"body":{"index.html":{}}}],["commands",{"_index":416,"title":{},"body":{"index.html":{}}}],["compatible",{"_index":377,"title":{},"body":{"index.html":{}}}],["completing",{"_index":449,"title":{},"body":{"index.html":{}}}],["compodoc",{"_index":465,"title":{},"body":{"index.html":{}}}],["compodoc:build",{"_index":471,"title":{},"body":{"index.html":{}}}],["compodoc:serve",{"_index":473,"title":{},"body":{"index.html":{}}}],["component",{"_index":229,"title":{},"body":{"classes/Edge.html":{},"interfaces/Layout.html":{},"interfaces/Matrix.html":{},"classes/Node.html":{},"coverage.html":{},"overview.html":{}}}],["compound",{"_index":40,"title":{},"body":{"classes/DagreLayout.html":{},"interfaces/DagreSettings.html":{}}}],["comprehensive",{"_index":475,"title":{},"body":{"index.html":{}}}],["configuration",{"_index":434,"title":{},"body":{"index.html":{}}}],["const",{"_index":95,"title":{},"body":{"classes/DagreLayout.html":{},"interfaces/DagreSettings.html":{}}}],["constrain",{"_index":342,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["constrains",{"_index":489,"title":{},"body":{"miscellaneous/variables.html":{}}}],["construct",{"_index":79,"title":{},"body":{"classes/DagreLayout.html":{},"interfaces/DagreSettings.html":{}}}],["convert",{"_index":289,"title":{},"body":{"directives/MouseWheelDirective.html":{}}}],["correct",{"_index":217,"title":{},"body":{"classes/Edge.html":{},"interfaces/Layout.html":{},"interfaces/Matrix.html":{},"classes/Node.html":{}}}],["coverage",{"_index":322,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["created",{"_index":464,"title":{},"body":{"index.html":{}}}],["createdagregraph",{"_index":11,"title":{},"body":{"classes/DagreLayout.html":{}}}],["css",{"_index":215,"title":{},"body":{"classes/Edge.html":{},"interfaces/Layout.html":{},"interfaces/Matrix.html":{},"classes/Node.html":{}}}],["currently",{"_index":389,"title":{},"body":{"index.html":{}}}],["custom",{"_index":404,"title":{},"body":{"index.html":{}}}],["d",{"_index":237,"title":{},"body":{"classes/Edge.html":{},"interfaces/Layout.html":{},"interfaces/Matrix.html":{},"classes/Node.html":{}}}],["d3",{"_index":357,"title":{},"body":{"dependencies.html":{}}}],["dagre",{"_index":46,"title":{},"body":{"classes/DagreLayout.html":{},"interfaces/DagreSettings.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{}}}],["dagre.graphlib.graph",{"_index":130,"title":{},"body":{"classes/DagreLayout.html":{},"interfaces/DagreSettings.html":{}}}],["dagre.layout(dagregraph",{"_index":98,"title":{},"body":{"classes/DagreLayout.html":{},"interfaces/DagreSettings.html":{}}}],["dagreedges",{"_index":12,"title":{},"body":{"classes/DagreLayout.html":{},"interfaces/DagreSettings.html":{}}}],["dagregraph",{"_index":96,"title":{},"body":{"classes/DagreLayout.html":{},"interfaces/DagreSettings.html":{}}}],["dagregraph._nodes",{"_index":100,"title":{},"body":{"classes/DagreLayout.html":{},"interfaces/DagreSettings.html":{}}}],["dagregraph._nodes[dagrenodeid",{"_index":102,"title":{},"body":{"classes/DagreLayout.html":{},"interfaces/DagreSettings.html":{}}}],["dagregraph.setdefaultedgelabel",{"_index":148,"title":{},"body":{"classes/DagreLayout.html":{},"interfaces/DagreSettings.html":{}}}],["dagregraph.setedge(...args",{"_index":170,"title":{},"body":{"classes/DagreLayout.html":{},"interfaces/DagreSettings.html":{}}}],["dagregraph.setgraph",{"_index":134,"title":{},"body":{"classes/DagreLayout.html":{},"interfaces/DagreSettings.html":{}}}],["dagregraph.setnode(n.id",{"_index":162,"title":{},"body":{"classes/DagreLayout.html":{},"interfaces/DagreSettings.html":{}}}],["dagrelayout",{"_index":1,"title":{"classes/DagreLayout.html":{}},"body":{"classes/DagreLayout.html":{},"interfaces/DagreSettings.html":{},"coverage.html":{}}}],["dagrenode",{"_index":101,"title":{},"body":{"classes/DagreLayout.html":{},"interfaces/DagreSettings.html":{}}}],["dagrenode.height",{"_index":115,"title":{},"body":{"classes/DagreLayout.html":{},"interfaces/DagreSettings.html":{}}}],["dagrenode.id",{"_index":105,"title":{},"body":{"classes/DagreLayout.html":{},"interfaces/DagreSettings.html":{}}}],["dagrenode.width",{"_index":113,"title":{},"body":{"classes/DagreLayout.html":{},"interfaces/DagreSettings.html":{}}}],["dagrenode.x",{"_index":108,"title":{},"body":{"classes/DagreLayout.html":{},"interfaces/DagreSettings.html":{}}}],["dagrenode.y",{"_index":110,"title":{},"body":{"classes/DagreLayout.html":{},"interfaces/DagreSettings.html":{}}}],["dagrenodeid",{"_index":99,"title":{},"body":{"classes/DagreLayout.html":{},"interfaces/DagreSettings.html":{}}}],["dagrenodes",{"_index":13,"title":{},"body":{"classes/DagreLayout.html":{},"interfaces/DagreSettings.html":{}}}],["dagresettings",{"_index":27,"title":{"interfaces/DagreSettings.html":{}},"body":{"classes/DagreLayout.html":{},"interfaces/DagreSettings.html":{},"coverage.html":{}}}],["decorators",{"_index":297,"title":{},"body":{"directives/MouseWheelDirective.html":{}}}],["default",{"_index":19,"title":{},"body":{"classes/DagreLayout.html":{},"classes/Edge.html":{},"classes/Node.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["defaultsettings",{"_index":14,"title":{},"body":{"classes/DagreLayout.html":{},"interfaces/DagreSettings.html":{}}}],["defined",{"_index":22,"title":{},"body":{"classes/DagreLayout.html":{},"classes/Edge.html":{},"interfaces/Layout.html":{},"directives/MouseWheelDirective.html":{},"classes/Node.html":{}}}],["delta",{"_index":310,"title":{},"body":{"directives/MouseWheelDirective.html":{}}}],["demo",{"_index":430,"title":{},"body":{"index.html":{}}}],["dependencies",{"_index":347,"title":{"dependencies.html":{}},"body":{"dependencies.html":{}}}],["describes",{"_index":199,"title":{},"body":{"classes/Edge.html":{},"interfaces/Layout.html":{},"interfaces/Matrix.html":{},"classes/Node.html":{}}}],["description",{"_index":174,"title":{},"body":{"interfaces/DagreSettings.html":{},"classes/Edge.html":{},"interfaces/Layout.html":{},"interfaces/Matrix.html":{},"directives/MouseWheelDirective.html":{},"classes/Node.html":{}}}],["determine",{"_index":121,"title":{},"body":{"classes/DagreLayout.html":{},"interfaces/DagreSettings.html":{}}}],["development",{"_index":414,"title":{},"body":{"index.html":{}}}],["differentiate",{"_index":193,"title":{},"body":{"classes/Edge.html":{},"interfaces/Layout.html":{},"interfaces/Matrix.html":{},"classes/Node.html":{}}}],["dimension",{"_index":214,"title":{},"body":{"classes/Edge.html":{},"interfaces/Layout.html":{},"interfaces/Matrix.html":{},"classes/Node.html":{}}}],["dir",{"_index":125,"title":{},"body":{"classes/DagreLayout.html":{},"interfaces/DagreSettings.html":{}}}],["directed",{"_index":178,"title":{},"body":{"classes/Edge.html":{},"interfaces/Layout.html":{},"interfaces/Matrix.html":{},"classes/Node.html":{},"index.html":{}}}],["directive",{"_index":245,"title":{"directives/MouseWheelDirective.html":{}},"body":{"directives/MouseWheelDirective.html":{},"coverage.html":{},"overview.html":{}}}],["directives",{"_index":247,"title":{},"body":{"directives/MouseWheelDirective.html":{}}}],["directory",{"_index":472,"title":{},"body":{"index.html":{}}}],["display",{"_index":395,"title":{},"body":{"index.html":{}}}],["displayed",{"_index":402,"title":{},"body":{"index.html":{}}}],["dl",{"_index":75,"title":{},"body":{"classes/DagreLayout.html":{},"interfaces/DagreSettings.html":{},"miscellaneous/enumerations.html":{}}}],["docs",{"_index":469,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":323,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["dommousescroll",{"_index":268,"title":{},"body":{"directives/MouseWheelDirective.html":{}}}],["down",{"_index":275,"title":{},"body":{"directives/MouseWheelDirective.html":{}}}],["down_left",{"_index":74,"title":{},"body":{"classes/DagreLayout.html":{},"interfaces/DagreSettings.html":{},"miscellaneous/enumerations.html":{}}}],["down_right",{"_index":76,"title":{},"body":{"classes/DagreLayout.html":{},"interfaces/DagreSettings.html":{},"miscellaneous/enumerations.html":{}}}],["dr",{"_index":77,"title":{},"body":{"classes/DagreLayout.html":{},"interfaces/DagreSettings.html":{},"miscellaneous/enumerations.html":{}}}],["dynamic",{"_index":355,"title":{},"body":{"dependencies.html":{}}}],["e",{"_index":168,"title":{},"body":{"classes/DagreLayout.html":{},"interfaces/DagreSettings.html":{},"classes/Edge.html":{},"interfaces/Layout.html":{},"interfaces/Matrix.html":{},"classes/Node.html":{}}}],["e.id",{"_index":169,"title":{},"body":{"classes/DagreLayout.html":{},"interfaces/DagreSettings.html":{}}}],["e.source",{"_index":166,"title":{},"body":{"classes/DagreLayout.html":{},"interfaces/DagreSettings.html":{}}}],["e.target",{"_index":167,"title":{},"body":{"classes/DagreLayout.html":{},"interfaces/DagreSettings.html":{}}}],["easily",{"_index":381,"title":{},"body":{"index.html":{}}}],["edge",{"_index":48,"title":{"classes/Edge.html":{}},"body":{"classes/DagreLayout.html":{},"interfaces/DagreSettings.html":{},"classes/Edge.html":{},"interfaces/Layout.html":{},"interfaces/Matrix.html":{},"classes/Node.html":{},"coverage.html":{},"index.html":{}}}],["edge.source",{"_index":118,"title":{},"body":{"classes/DagreLayout.html":{},"interfaces/DagreSettings.html":{}}}],["edge.target",{"_index":120,"title":{},"body":{"classes/DagreLayout.html":{},"interfaces/DagreSettings.html":{}}}],["edgepadding",{"_index":33,"title":{},"body":{"classes/DagreLayout.html":{},"interfaces/DagreSettings.html":{}}}],["edges",{"_index":94,"title":{},"body":{"classes/DagreLayout.html":{},"interfaces/DagreSettings.html":{},"classes/Edge.html":{},"interfaces/Layout.html":{},"interfaces/Matrix.html":{},"classes/Node.html":{}}}],["edgesep",{"_index":139,"title":{},"body":{"classes/DagreLayout.html":{},"interfaces/DagreSettings.html":{}}}],["emits",{"_index":272,"title":{},"body":{"directives/MouseWheelDirective.html":{}}}],["emitted",{"_index":293,"title":{},"body":{"directives/MouseWheelDirective.html":{}}}],["ends",{"_index":209,"title":{},"body":{"classes/Edge.html":{},"interfaces/Layout.html":{},"interfaces/Matrix.html":{},"classes/Node.html":{}}}],["engine",{"_index":408,"title":{},"body":{"index.html":{}}}],["enum",{"_index":53,"title":{},"body":{"classes/DagreLayout.html":{},"interfaces/DagreSettings.html":{},"miscellaneous/enumerations.html":{}}}],["enumerations",{"_index":370,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["event",{"_index":279,"title":{},"body":{"directives/MouseWheelDirective.html":{}}}],["event.detail",{"_index":315,"title":{},"body":{"directives/MouseWheelDirective.html":{}}}],["event.wheeldelta",{"_index":314,"title":{},"body":{"directives/MouseWheelDirective.html":{}}}],["eventemitter",{"_index":270,"title":{},"body":{"directives/MouseWheelDirective.html":{}}}],["events",{"_index":253,"title":{},"body":{"directives/MouseWheelDirective.html":{},"index.html":{}}}],["example",{"_index":419,"title":{},"body":{"index.html":{}}}],["examples/blob/master/app/mousewheeldirective/mousewheel.directive.ts",{"_index":255,"title":{},"body":{"directives/MouseWheelDirective.html":{}}}],["export",{"_index":57,"title":{},"body":{"classes/DagreLayout.html":{},"interfaces/DagreSettings.html":{},"classes/Edge.html":{},"interfaces/Layout.html":{},"interfaces/Matrix.html":{},"directives/MouseWheelDirective.html":{},"classes/Node.html":{}}}],["exposed",{"_index":413,"title":{},"body":{"index.html":{}}}],["f",{"_index":238,"title":{},"body":{"classes/Edge.html":{},"interfaces/Layout.html":{},"interfaces/Matrix.html":{},"classes/Node.html":{}}}],["fail",{"_index":452,"title":{},"body":{"index.html":{}}}],["features",{"_index":388,"title":{},"body":{"index.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/DagreLayout.html":{},"interfaces/DagreSettings.html":{},"classes/Edge.html":{},"interfaces/Layout.html":{},"interfaces/Matrix.html":{},"directives/MouseWheelDirective.html":{},"classes/Node.html":{},"coverage.html":{}}}],["fired",{"_index":294,"title":{},"body":{"directives/MouseWheelDirective.html":{}}}],["firefox",{"_index":282,"title":{},"body":{"directives/MouseWheelDirective.html":{}}}],["first",{"_index":446,"title":{},"body":{"index.html":{}}}],["five",{"_index":426,"title":{},"body":{"index.html":{}}}],["following",{"_index":391,"title":{},"body":{"index.html":{}}}],["form",{"_index":292,"title":{},"body":{"directives/MouseWheelDirective.html":{}}}],["four",{"_index":454,"title":{},"body":{"index.html":{}}}],["generate",{"_index":204,"title":{},"body":{"classes/Edge.html":{},"interfaces/Layout.html":{},"interfaces/Matrix.html":{},"classes/Node.html":{},"index.html":{}}}],["generated",{"_index":191,"title":{},"body":{"classes/Edge.html":{},"interfaces/Layout.html":{},"interfaces/Matrix.html":{},"classes/Node.html":{},"index.html":{}}}],["getting",{"_index":372,"title":{"index.html":{}},"body":{}}],["git",{"_index":420,"title":{},"body":{"index.html":{}}}],["given",{"_index":490,"title":{},"body":{"miscellaneous/variables.html":{}}}],["graph",{"_index":56,"title":{},"body":{"classes/DagreLayout.html":{},"interfaces/DagreSettings.html":{},"classes/Edge.html":{},"interfaces/Layout.html":{},"interfaces/Matrix.html":{},"classes/Node.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["graphcomponent",{"_index":220,"title":{},"body":{"classes/Edge.html":{},"interfaces/Layout.html":{},"interfaces/Matrix.html":{},"classes/Node.html":{}}}],["greedy",{"_index":83,"title":{},"body":{"classes/DagreLayout.html":{},"interfaces/DagreSettings.html":{}}}],["h",{"_index":114,"title":{},"body":{"classes/DagreLayout.html":{},"interfaces/DagreSettings.html":{},"classes/Edge.html":{},"interfaces/Layout.html":{},"interfaces/Matrix.html":{},"classes/Node.html":{}}}],["headless",{"_index":460,"title":{},"body":{"index.html":{}}}],["height",{"_index":213,"title":{},"body":{"classes/Edge.html":{},"interfaces/Layout.html":{},"interfaces/Matrix.html":{},"classes/Node.html":{}}}],["hostlistener",{"_index":304,"title":{},"body":{"directives/MouseWheelDirective.html":{}}}],["hostlistener('dommousescroll",{"_index":300,"title":{},"body":{"directives/MouseWheelDirective.html":{}}}],["hostlistener('mousewheel",{"_index":298,"title":{},"body":{"directives/MouseWheelDirective.html":{}}}],["hostlistener('onmousewheel",{"_index":302,"title":{},"body":{"directives/MouseWheelDirective.html":{}}}],["hostlisteners",{"_index":267,"title":{},"body":{"directives/MouseWheelDirective.html":{}}}],["https://github.com/sn00pyw00dst0ck/ng",{"_index":422,"title":{},"body":{"index.html":{}}}],["https://github.com/sodhanalibrary/angular2",{"_index":254,"title":{},"body":{"directives/MouseWheelDirective.html":{}}}],["ibuild",{"_index":425,"title":{},"body":{"index.html":{}}}],["id",{"_index":181,"title":{},"body":{"classes/Edge.html":{},"interfaces/Layout.html":{},"interfaces/Matrix.html":{},"classes/Node.html":{}}}],["identifier",{"_index":324,"title":{},"body":{"coverage.html":{}}}],["ie",{"_index":286,"title":{},"body":{"directives/MouseWheelDirective.html":{}}}],["implement",{"_index":403,"title":{},"body":{"index.html":{}}}],["import",{"_index":45,"title":{},"body":{"classes/DagreLayout.html":{},"interfaces/DagreSettings.html":{},"classes/Edge.html":{},"interfaces/Layout.html":{},"interfaces/Matrix.html":{},"directives/MouseWheelDirective.html":{},"classes/Node.html":{}}}],["improve",{"_index":476,"title":{},"body":{"index.html":{}}}],["index",{"_index":8,"title":{"index.html":{}},"body":{"classes/DagreLayout.html":{},"interfaces/DagreSettings.html":{},"classes/Edge.html":{},"interfaces/Layout.html":{},"interfaces/Matrix.html":{},"directives/MouseWheelDirective.html":{},"classes/Node.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/DagreLayout.html":{},"interfaces/DagreSettings.html":{},"classes/Edge.html":{},"interfaces/Layout.html":{},"interfaces/Matrix.html":{},"directives/MouseWheelDirective.html":{},"classes/Node.html":{}}}],["install",{"_index":384,"title":{},"body":{"index.html":{}}}],["installation",{"_index":383,"title":{},"body":{"index.html":{}}}],["interface",{"_index":80,"title":{"interfaces/DagreSettings.html":{},"interfaces/Layout.html":{},"interfaces/Matrix.html":{}},"body":{"classes/DagreLayout.html":{},"interfaces/DagreSettings.html":{},"classes/Edge.html":{},"interfaces/Layout.html":{},"interfaces/Matrix.html":{},"classes/Node.html":{},"coverage.html":{}}}],["interface/loom.interface",{"_index":49,"title":{},"body":{"classes/DagreLayout.html":{},"interfaces/DagreSettings.html":{}}}],["interfaces",{"_index":173,"title":{},"body":{"interfaces/DagreSettings.html":{},"interfaces/Layout.html":{},"interfaces/Matrix.html":{},"overview.html":{}}}],["internally",{"_index":227,"title":{},"body":{"classes/Edge.html":{},"interfaces/Layout.html":{},"interfaces/Matrix.html":{},"classes/Node.html":{}}}],["label",{"_index":182,"title":{},"body":{"classes/Edge.html":{},"interfaces/Layout.html":{},"interfaces/Matrix.html":{},"classes/Node.html":{}}}],["layout",{"_index":219,"title":{"interfaces/Layout.html":{}},"body":{"classes/Edge.html":{},"interfaces/Layout.html":{},"interfaces/Matrix.html":{},"classes/Node.html":{},"coverage.html":{}}}],["layouts",{"_index":405,"title":{},"body":{"index.html":{}}}],["left_to_right",{"_index":58,"title":{},"body":{"classes/DagreLayout.html":{},"interfaces/DagreSettings.html":{},"miscellaneous/enumerations.html":{}}}],["library",{"_index":378,"title":{},"body":{"index.html":{}}}],["line",{"_index":183,"title":{},"body":{"classes/Edge.html":{},"interfaces/Layout.html":{},"interfaces/Matrix.html":{},"classes/Node.html":{}}}],["linux",{"_index":417,"title":{},"body":{"index.html":{}}}],["listens",{"_index":281,"title":{},"body":{"directives/MouseWheelDirective.html":{}}}],["literal",{"_index":201,"title":{},"body":{"classes/Edge.html":{},"classes/Node.html":{}}}],["localhost",{"_index":443,"title":{},"body":{"index.html":{}}}],["localhost:5555",{"_index":474,"title":{},"body":{"index.html":{}}}],["longest",{"_index":90,"title":{},"body":{"classes/DagreLayout.html":{},"interfaces/DagreSettings.html":{}}}],["loom",{"_index":228,"title":{},"body":{"classes/Edge.html":{},"interfaces/Layout.html":{},"interfaces/Matrix.html":{},"classes/Node.html":{},"index.html":{}}}],["loom.git",{"_index":423,"title":{},"body":{"index.html":{}}}],["loom/src/lib/interface/loom.interface.ts",{"_index":176,"title":{},"body":{"classes/Edge.html":{},"interfaces/Layout.html":{},"interfaces/Matrix.html":{},"classes/Node.html":{},"coverage.html":{}}}],["loom/src/lib/interface/loom.interface.ts:11",{"_index":318,"title":{},"body":{"classes/Node.html":{}}}],["loom/src/lib/interface/loom.interface.ts:15",{"_index":320,"title":{},"body":{"classes/Node.html":{}}}],["loom/src/lib/interface/loom.interface.ts:19",{"_index":317,"title":{},"body":{"classes/Node.html":{}}}],["loom/src/lib/interface/loom.interface.ts:23",{"_index":319,"title":{},"body":{"classes/Node.html":{}}}],["loom/src/lib/interface/loom.interface.ts:27",{"_index":321,"title":{},"body":{"classes/Node.html":{}}}],["loom/src/lib/interface/loom.interface.ts:37",{"_index":189,"title":{},"body":{"classes/Edge.html":{}}}],["loom/src/lib/interface/loom.interface.ts:41",{"_index":206,"title":{},"body":{"classes/Edge.html":{}}}],["loom/src/lib/interface/loom.interface.ts:45",{"_index":208,"title":{},"body":{"classes/Edge.html":{}}}],["loom/src/lib/interface/loom.interface.ts:49",{"_index":195,"title":{},"body":{"classes/Edge.html":{}}}],["loom/src/lib/interface/loom.interface.ts:53",{"_index":202,"title":{},"body":{"classes/Edge.html":{}}}],["loom/src/lib/interface/loom.interface.ts:57",{"_index":197,"title":{},"body":{"classes/Edge.html":{}}}],["loom/src/lib/interface/loom.interface.ts:58",{"_index":210,"title":{},"body":{"classes/Edge.html":{}}}],["loom/src/lib/interface/loom.interface.ts:74",{"_index":240,"title":{},"body":{"interfaces/Layout.html":{}}}],["loom/src/lib/interface/loom.interface.ts:81",{"_index":244,"title":{},"body":{"interfaces/Layout.html":{}}}],["loom/src/lib/layouts/dagre.layout.ts",{"_index":7,"title":{},"body":{"classes/DagreLayout.html":{},"interfaces/DagreSettings.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["loom/src/lib/layouts/dagre.layout.ts:102",{"_index":23,"title":{},"body":{"classes/DagreLayout.html":{}}}],["loom/src/lib/layouts/dagre.layout.ts:47",{"_index":41,"title":{},"body":{"classes/DagreLayout.html":{}}}],["loom/src/lib/layouts/dagre.layout.ts:57",{"_index":43,"title":{},"body":{"classes/DagreLayout.html":{}}}],["loom/src/lib/layouts/dagre.layout.ts:59",{"_index":26,"title":{},"body":{"classes/DagreLayout.html":{}}}],["loom/src/lib/layouts/dagre.layout.ts:60",{"_index":25,"title":{},"body":{"classes/DagreLayout.html":{}}}],["loom/src/lib/layouts/dagre.layout.ts:62",{"_index":42,"title":{},"body":{"classes/DagreLayout.html":{}}}],["loom/src/lib/layouts/dagre.layout.ts:82",{"_index":44,"title":{},"body":{"classes/DagreLayout.html":{}}}],["loom/src/lib/loom/loom.component.ts",{"_index":335,"title":{},"body":{"coverage.html":{}}}],["loom/src/lib/mousewheel.directive.ts",{"_index":248,"title":{},"body":{"directives/MouseWheelDirective.html":{},"coverage.html":{}}}],["loom/src/lib/mousewheel.directive.ts:14",{"_index":276,"title":{},"body":{"directives/MouseWheelDirective.html":{}}}],["loom/src/lib/mousewheel.directive.ts:19",{"_index":271,"title":{},"body":{"directives/MouseWheelDirective.html":{}}}],["loom/src/lib/mousewheel.directive.ts:26",{"_index":283,"title":{},"body":{"directives/MouseWheelDirective.html":{}}}],["loom/src/lib/mousewheel.directive.ts:35",{"_index":280,"title":{},"body":{"directives/MouseWheelDirective.html":{}}}],["loom/src/lib/mousewheel.directive.ts:44",{"_index":285,"title":{},"body":{"directives/MouseWheelDirective.html":{}}}],["loom/src/lib/mousewheel.directive.ts:53",{"_index":288,"title":{},"body":{"directives/MouseWheelDirective.html":{}}}],["loom/src/lib/utils.ts",{"_index":340,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["loomcomponent",{"_index":336,"title":{},"body":{"coverage.html":{}}}],["lr",{"_index":59,"title":{},"body":{"classes/DagreLayout.html":{},"interfaces/DagreSettings.html":{},"miscellaneous/enumerations.html":{}}}],["marginx",{"_index":30,"title":{},"body":{"classes/DagreLayout.html":{},"interfaces/DagreSettings.html":{}}}],["marginy",{"_index":32,"title":{},"body":{"classes/DagreLayout.html":{},"interfaces/DagreSettings.html":{}}}],["matching",{"_index":172,"title":{},"body":{"classes/DagreLayout.html":{},"interfaces/DagreSettings.html":{},"classes/Edge.html":{},"interfaces/Layout.html":{},"interfaces/Matrix.html":{},"directives/MouseWheelDirective.html":{},"classes/Node.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["math.max",{"_index":311,"title":{},"body":{"directives/MouseWheelDirective.html":{}}}],["math.min(1",{"_index":313,"title":{},"body":{"directives/MouseWheelDirective.html":{}}}],["matrix",{"_index":235,"title":{"interfaces/Matrix.html":{}},"body":{"classes/Edge.html":{},"interfaces/Layout.html":{},"interfaces/Matrix.html":{},"classes/Node.html":{},"coverage.html":{},"dependencies.html":{}}}],["max",{"_index":488,"title":{},"body":{"miscellaneous/variables.html":{}}}],["metadata",{"_index":256,"title":{},"body":{"directives/MouseWheelDirective.html":{}}}],["methods",{"_index":239,"title":{},"body":{"interfaces/Layout.html":{},"directives/MouseWheelDirective.html":{},"index.html":{}}}],["min",{"_index":487,"title":{},"body":{"miscellaneous/variables.html":{}}}],["miscellaneous",{"_index":369,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["mode",{"_index":461,"title":{},"body":{"index.html":{}}}],["modules",{"_index":481,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["more",{"_index":250,"title":{},"body":{"directives/MouseWheelDirective.html":{}}}],["mouse",{"_index":251,"title":{},"body":{"directives/MouseWheelDirective.html":{}}}],["mousewheel",{"_index":258,"title":{},"body":{"directives/MouseWheelDirective.html":{}}}],["mousewheeldirective",{"_index":246,"title":{"directives/MouseWheelDirective.html":{}},"body":{"directives/MouseWheelDirective.html":{},"coverage.html":{}}}],["mousewheeldown",{"_index":265,"title":{},"body":{"directives/MouseWheelDirective.html":{}}}],["mousewheelfunc",{"_index":260,"title":{},"body":{"directives/MouseWheelDirective.html":{}}}],["mousewheelfunc(event",{"_index":287,"title":{},"body":{"directives/MouseWheelDirective.html":{}}}],["mousewheelup",{"_index":266,"title":{},"body":{"directives/MouseWheelDirective.html":{}}}],["multigraph",{"_index":38,"title":{},"body":{"classes/DagreLayout.html":{},"interfaces/DagreSettings.html":{}}}],["n",{"_index":152,"title":{},"body":{"classes/DagreLayout.html":{},"interfaces/DagreSettings.html":{}}}],["n.dimension.h",{"_index":156,"title":{},"body":{"classes/DagreLayout.html":{},"interfaces/DagreSettings.html":{}}}],["n.dimension.w",{"_index":154,"title":{},"body":{"classes/DagreLayout.html":{},"interfaces/DagreSettings.html":{}}}],["n.id",{"_index":104,"title":{},"body":{"classes/DagreLayout.html":{},"interfaces/DagreSettings.html":{}}}],["n.position.x",{"_index":158,"title":{},"body":{"classes/DagreLayout.html":{},"interfaces/DagreSettings.html":{}}}],["n.position.y",{"_index":160,"title":{},"body":{"classes/DagreLayout.html":{},"interfaces/DagreSettings.html":{}}}],["name",{"_index":242,"title":{},"body":{"interfaces/Layout.html":{},"directives/MouseWheelDirective.html":{}}}],["nanoid",{"_index":188,"title":{},"body":{"classes/Edge.html":{},"interfaces/Layout.html":{},"interfaces/Matrix.html":{},"classes/Node.html":{},"dependencies.html":{}}}],["network",{"_index":86,"title":{},"body":{"classes/DagreLayout.html":{},"interfaces/DagreSettings.html":{}}}],["new",{"_index":122,"title":{},"body":{"classes/DagreLayout.html":{},"interfaces/DagreSettings.html":{},"directives/MouseWheelDirective.html":{},"coverage.html":{}}}],["ng",{"_index":398,"title":{},"body":{"index.html":{}}}],["ngx",{"_index":374,"title":{},"body":{"index.html":{}}}],["node",{"_index":47,"title":{"classes/Node.html":{}},"body":{"classes/DagreLayout.html":{},"interfaces/DagreSettings.html":{},"classes/Edge.html":{},"interfaces/Layout.html":{},"interfaces/Matrix.html":{},"classes/Node.html":{},"coverage.html":{},"index.html":{}}}],["node.dimension",{"_index":111,"title":{},"body":{"classes/DagreLayout.html":{},"interfaces/DagreSettings.html":{}}}],["node.height",{"_index":155,"title":{},"body":{"classes/DagreLayout.html":{},"interfaces/DagreSettings.html":{}}}],["node.position",{"_index":106,"title":{},"body":{"classes/DagreLayout.html":{},"interfaces/DagreSettings.html":{}}}],["node.width",{"_index":153,"title":{},"body":{"classes/DagreLayout.html":{},"interfaces/DagreSettings.html":{}}}],["node.x",{"_index":157,"title":{},"body":{"classes/DagreLayout.html":{},"interfaces/DagreSettings.html":{}}}],["node.y",{"_index":159,"title":{},"body":{"classes/DagreLayout.html":{},"interfaces/DagreSettings.html":{}}}],["nodepadding",{"_index":36,"title":{},"body":{"classes/DagreLayout.html":{},"interfaces/DagreSettings.html":{}}}],["nodes",{"_index":93,"title":{},"body":{"classes/DagreLayout.html":{},"interfaces/DagreSettings.html":{},"interfaces/Layout.html":{}}}],["nodes.find(n",{"_index":103,"title":{},"body":{"classes/DagreLayout.html":{},"interfaces/DagreSettings.html":{}}}],["nodes.map(n",{"_index":151,"title":{},"body":{"classes/DagreLayout.html":{},"interfaces/DagreSettings.html":{}}}],["nodesep",{"_index":143,"title":{},"body":{"classes/DagreLayout.html":{},"interfaces/DagreSettings.html":{}}}],["note",{"_index":444,"title":{},"body":{"index.html":{}}}],["npm",{"_index":387,"title":{},"body":{"index.html":{}}}],["number",{"_index":81,"title":{},"body":{"classes/DagreLayout.html":{},"interfaces/DagreSettings.html":{},"classes/Edge.html":{},"interfaces/Layout.html":{},"interfaces/Matrix.html":{},"classes/Node.html":{},"miscellaneous/variables.html":{}}}],["object.assign",{"_index":127,"title":{},"body":{"classes/DagreLayout.html":{},"interfaces/DagreSettings.html":{}}}],["old",{"_index":308,"title":{},"body":{"directives/MouseWheelDirective.html":{}}}],["onmousewheel",{"_index":269,"title":{},"body":{"directives/MouseWheelDirective.html":{}}}],["onmousewheelchrome",{"_index":261,"title":{},"body":{"directives/MouseWheelDirective.html":{}}}],["onmousewheelchrome(event",{"_index":296,"title":{},"body":{"directives/MouseWheelDirective.html":{}}}],["onmousewheelfirefox",{"_index":262,"title":{},"body":{"directives/MouseWheelDirective.html":{}}}],["onmousewheelfirefox(event",{"_index":299,"title":{},"body":{"directives/MouseWheelDirective.html":{}}}],["onmousewheelie",{"_index":263,"title":{},"body":{"directives/MouseWheelDirective.html":{}}}],["onmousewheelie(event",{"_index":301,"title":{},"body":{"directives/MouseWheelDirective.html":{}}}],["optional",{"_index":175,"title":{},"body":{"interfaces/DagreSettings.html":{},"interfaces/Layout.html":{},"directives/MouseWheelDirective.html":{}}}],["options",{"_index":54,"title":{},"body":{"classes/DagreLayout.html":{},"interfaces/DagreSettings.html":{},"directives/MouseWheelDirective.html":{},"miscellaneous/enumerations.html":{}}}],["order",{"_index":445,"title":{},"body":{"index.html":{}}}],["orient",{"_index":55,"title":{},"body":{"classes/DagreLayout.html":{},"interfaces/DagreSettings.html":{},"miscellaneous/enumerations.html":{}}}],["orientation",{"_index":28,"title":{},"body":{"classes/DagreLayout.html":{},"interfaces/DagreSettings.html":{},"miscellaneous/enumerations.html":{}}}],["orientation.left_to_right",{"_index":29,"title":{},"body":{"classes/DagreLayout.html":{},"interfaces/DagreSettings.html":{}}}],["others",{"_index":194,"title":{},"body":{"classes/Edge.html":{},"interfaces/Layout.html":{},"interfaces/Matrix.html":{},"classes/Node.html":{}}}],["output",{"_index":303,"title":{},"body":{"directives/MouseWheelDirective.html":{},"index.html":{}}}],["outputs",{"_index":264,"title":{},"body":{"directives/MouseWheelDirective.html":{}}}],["overview",{"_index":482,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["overwrite",{"_index":394,"title":{},"body":{"index.html":{}}}],["package",{"_index":346,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":470,"title":{},"body":{"index.html":{}}}],["pan",{"_index":400,"title":{},"body":{"index.html":{}}}],["panning",{"_index":234,"title":{},"body":{"classes/Edge.html":{},"interfaces/Layout.html":{},"interfaces/Matrix.html":{},"classes/Node.html":{}}}],["param",{"_index":223,"title":{},"body":{"classes/Edge.html":{},"interfaces/Layout.html":{},"interfaces/Matrix.html":{},"directives/MouseWheelDirective.html":{},"classes/Node.html":{}}}],["parameters",{"_index":241,"title":{},"body":{"interfaces/Layout.html":{},"directives/MouseWheelDirective.html":{}}}],["path",{"_index":91,"title":{},"body":{"classes/DagreLayout.html":{},"interfaces/DagreSettings.html":{},"classes/Edge.html":{},"interfaces/Layout.html":{},"interfaces/Matrix.html":{},"classes/Node.html":{}}}],["points",{"_index":184,"title":{},"body":{"classes/Edge.html":{},"interfaces/Layout.html":{},"interfaces/Matrix.html":{},"classes/Node.html":{}}}],["position",{"_index":124,"title":{},"body":{"classes/DagreLayout.html":{},"interfaces/DagreSettings.html":{},"classes/Edge.html":{},"interfaces/Layout.html":{},"interfaces/Matrix.html":{},"classes/Node.html":{}}}],["private",{"_index":10,"title":{},"body":{"classes/DagreLayout.html":{},"interfaces/DagreSettings.html":{}}}],["production",{"_index":437,"title":{},"body":{"index.html":{}}}],["project",{"_index":439,"title":{},"body":{"index.html":{}}}],["projects/.../dagre.layout.ts",{"_index":371,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["projects/.../utils.ts",{"_index":486,"title":{},"body":{"miscellaneous/variables.html":{}}}],["projects/ngx",{"_index":6,"title":{},"body":{"classes/DagreLayout.html":{},"interfaces/DagreSettings.html":{},"classes/Edge.html":{},"interfaces/Layout.html":{},"interfaces/Matrix.html":{},"directives/MouseWheelDirective.html":{},"classes/Node.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["properties",{"_index":9,"title":{"properties.html":{}},"body":{"classes/DagreLayout.html":{},"interfaces/DagreSettings.html":{},"classes/Edge.html":{},"interfaces/Layout.html":{},"interfaces/Matrix.html":{},"classes/Node.html":{},"properties.html":{}}}],["property",{"_index":205,"title":{},"body":{"classes/Edge.html":{},"interfaces/Layout.html":{},"interfaces/Matrix.html":{},"classes/Node.html":{}}}],["provided",{"_index":467,"title":{},"body":{"index.html":{}}}],["provides",{"_index":390,"title":{},"body":{"index.html":{}}}],["public",{"_index":15,"title":{},"body":{"classes/DagreLayout.html":{},"interfaces/DagreSettings.html":{},"classes/Edge.html":{},"interfaces/Layout.html":{},"interfaces/Matrix.html":{},"classes/Node.html":{}}}],["purpose",{"_index":380,"title":{},"body":{"index.html":{}}}],["raised",{"_index":410,"title":{},"body":{"index.html":{}}}],["rankdir",{"_index":135,"title":{},"body":{"classes/DagreLayout.html":{},"interfaces/DagreSettings.html":{}}}],["ranker",{"_index":85,"title":{},"body":{"classes/DagreLayout.html":{},"interfaces/DagreSettings.html":{}}}],["rankpadding",{"_index":35,"title":{},"body":{"classes/DagreLayout.html":{},"interfaces/DagreSettings.html":{}}}],["ranksep",{"_index":141,"title":{},"body":{"classes/DagreLayout.html":{},"interfaces/DagreSettings.html":{}}}],["relating",{"_index":232,"title":{},"body":{"classes/Edge.html":{},"interfaces/Layout.html":{},"interfaces/Matrix.html":{},"classes/Node.html":{}}}],["render",{"_index":222,"title":{},"body":{"classes/Edge.html":{},"interfaces/Layout.html":{},"interfaces/Matrix.html":{},"classes/Node.html":{},"index.html":{}}}],["rendering",{"_index":200,"title":{},"body":{"classes/Edge.html":{},"interfaces/Layout.html":{},"interfaces/Matrix.html":{},"classes/Node.html":{},"index.html":{}}}],["replacing",{"_index":407,"title":{},"body":{"index.html":{}}}],["represents",{"_index":177,"title":{},"body":{"classes/Edge.html":{},"interfaces/Layout.html":{},"interfaces/Matrix.html":{},"classes/Node.html":{}}}],["results",{"_index":171,"title":{},"body":{"classes/DagreLayout.html":{},"interfaces/DagreSettings.html":{},"classes/Edge.html":{},"interfaces/Layout.html":{},"interfaces/Matrix.html":{},"directives/MouseWheelDirective.html":{},"classes/Node.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":116,"title":{},"body":{"classes/DagreLayout.html":{},"interfaces/DagreSettings.html":{}}}],["returns",{"_index":243,"title":{},"body":{"interfaces/Layout.html":{},"directives/MouseWheelDirective.html":{}}}],["right_to_left",{"_index":60,"title":{},"body":{"classes/DagreLayout.html":{},"interfaces/DagreSettings.html":{},"miscellaneous/enumerations.html":{}}}],["rl",{"_index":61,"title":{},"body":{"classes/DagreLayout.html":{},"interfaces/DagreSettings.html":{},"miscellaneous/enumerations.html":{}}}],["run",{"_index":16,"title":{},"body":{"classes/DagreLayout.html":{},"interfaces/DagreSettings.html":{},"interfaces/Layout.html":{},"index.html":{}}}],["run(nodes",{"_index":224,"title":{},"body":{"classes/Edge.html":{},"interfaces/Layout.html":{},"interfaces/Matrix.html":{},"classes/Node.html":{}}}],["runs",{"_index":456,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":361,"title":{},"body":{"dependencies.html":{}}}],["scripts",{"_index":427,"title":{},"body":{"index.html":{}}}],["scrolled",{"_index":274,"title":{},"body":{"directives/MouseWheelDirective.html":{}}}],["selector",{"_index":257,"title":{},"body":{"directives/MouseWheelDirective.html":{}}}],["sequence",{"_index":203,"title":{},"body":{"classes/Edge.html":{},"interfaces/Layout.html":{},"interfaces/Matrix.html":{},"classes/Node.html":{}}}],["serve:demo",{"_index":441,"title":{},"body":{"index.html":{}}}],["serves",{"_index":442,"title":{},"body":{"index.html":{}}}],["settings",{"_index":17,"title":{},"body":{"classes/DagreLayout.html":{},"interfaces/DagreSettings.html":{},"classes/Edge.html":{},"interfaces/Layout.html":{},"interfaces/Matrix.html":{},"classes/Node.html":{}}}],["settings.acyclicer",{"_index":146,"title":{},"body":{"classes/DagreLayout.html":{},"interfaces/DagreSettings.html":{}}}],["settings.align",{"_index":145,"title":{},"body":{"classes/DagreLayout.html":{},"interfaces/DagreSettings.html":{}}}],["settings.compound",{"_index":131,"title":{},"body":{"classes/DagreLayout.html":{},"interfaces/DagreSettings.html":{}}}],["settings.edgepadding",{"_index":140,"title":{},"body":{"classes/DagreLayout.html":{},"interfaces/DagreSettings.html":{}}}],["settings.marginx",{"_index":137,"title":{},"body":{"classes/DagreLayout.html":{},"interfaces/DagreSettings.html":{}}}],["settings.marginy",{"_index":138,"title":{},"body":{"classes/DagreLayout.html":{},"interfaces/DagreSettings.html":{}}}],["settings.multigraph",{"_index":132,"title":{},"body":{"classes/DagreLayout.html":{},"interfaces/DagreSettings.html":{}}}],["settings.nodepadding",{"_index":144,"title":{},"body":{"classes/DagreLayout.html":{},"interfaces/DagreSettings.html":{}}}],["settings.orientation",{"_index":136,"title":{},"body":{"classes/DagreLayout.html":{},"interfaces/DagreSettings.html":{}}}],["settings.ranker",{"_index":147,"title":{},"body":{"classes/DagreLayout.html":{},"interfaces/DagreSettings.html":{}}}],["settings.rankpadding",{"_index":142,"title":{},"body":{"classes/DagreLayout.html":{},"interfaces/DagreSettings.html":{}}}],["setup",{"_index":415,"title":{},"body":{"index.html":{}}}],["signal",{"_index":50,"title":{},"body":{"classes/DagreLayout.html":{},"interfaces/DagreSettings.html":{}}}],["simplex",{"_index":87,"title":{},"body":{"classes/DagreLayout.html":{},"interfaces/DagreSettings.html":{}}}],["simplify",{"_index":230,"title":{},"body":{"classes/Edge.html":{},"interfaces/Layout.html":{},"interfaces/Matrix.html":{},"classes/Node.html":{}}}],["sole",{"_index":379,"title":{},"body":{"index.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/DagreLayout.html":{},"interfaces/DagreSettings.html":{},"classes/Edge.html":{},"interfaces/Layout.html":{},"interfaces/Matrix.html":{},"directives/MouseWheelDirective.html":{},"classes/Node.html":{}}}],["sourcenode",{"_index":117,"title":{},"body":{"classes/DagreLayout.html":{},"interfaces/DagreSettings.html":{}}}],["sourcenode.position.y",{"_index":126,"title":{},"body":{"classes/DagreLayout.html":{},"interfaces/DagreSettings.html":{}}}],["standalone",{"_index":259,"title":{},"body":{"directives/MouseWheelDirective.html":{}}}],["standard",{"_index":291,"title":{},"body":{"directives/MouseWheelDirective.html":{}}}],["started",{"_index":373,"title":{"index.html":{}},"body":{}}],["starts",{"_index":207,"title":{},"body":{"classes/Edge.html":{},"interfaces/Layout.html":{},"interfaces/Matrix.html":{},"classes/Node.html":{}}}],["statements",{"_index":325,"title":{},"body":{"coverage.html":{}}}],["step",{"_index":450,"title":{},"body":{"index.html":{}}}],["string",{"_index":187,"title":{},"body":{"classes/Edge.html":{},"interfaces/Layout.html":{},"interfaces/Matrix.html":{},"classes/Node.html":{}}}],["structure",{"_index":180,"title":{},"body":{"classes/Edge.html":{},"interfaces/Layout.html":{},"interfaces/Matrix.html":{},"classes/Node.html":{}}}],["structures",{"_index":382,"title":{},"body":{"index.html":{}}}],["styles",{"_index":396,"title":{},"body":{"index.html":{}}}],["support",{"_index":309,"title":{},"body":{"directives/MouseWheelDirective.html":{}}}],["svg",{"_index":198,"title":{},"body":{"classes/Edge.html":{},"interfaces/Layout.html":{},"interfaces/Matrix.html":{},"classes/Node.html":{}}}],["table",{"_index":345,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":344,"title":{},"body":{"coverage.html":{}}}],["target",{"_index":185,"title":{},"body":{"classes/Edge.html":{},"interfaces/Layout.html":{},"interfaces/Matrix.html":{},"classes/Node.html":{}}}],["targetnode",{"_index":119,"title":{},"body":{"classes/DagreLayout.html":{},"interfaces/DagreSettings.html":{}}}],["tb",{"_index":63,"title":{},"body":{"classes/DagreLayout.html":{},"interfaces/DagreSettings.html":{},"miscellaneous/enumerations.html":{}}}],["templates",{"_index":399,"title":{},"body":{"index.html":{}}}],["terminal",{"_index":418,"title":{},"body":{"index.html":{}}}],["test",{"_index":453,"title":{},"body":{"index.html":{}}}],["test:demo",{"_index":455,"title":{},"body":{"index.html":{}}}],["test:demo:headless",{"_index":459,"title":{},"body":{"index.html":{}}}],["test:loom",{"_index":462,"title":{},"body":{"index.html":{}}}],["test:loom:headless",{"_index":463,"title":{},"body":{"index.html":{}}}],["tests",{"_index":458,"title":{},"body":{"index.html":{}}}],["text",{"_index":196,"title":{},"body":{"classes/Edge.html":{},"interfaces/Layout.html":{},"interfaces/Matrix.html":{},"classes/Node.html":{}}}],["textpath",{"_index":186,"title":{},"body":{"classes/Edge.html":{},"interfaces/Layout.html":{},"interfaces/Matrix.html":{},"classes/Node.html":{}}}],["this.createdagregraph(nodes",{"_index":97,"title":{},"body":{"classes/DagreLayout.html":{},"interfaces/DagreSettings.html":{}}}],["this.dagreedges",{"_index":163,"title":{},"body":{"classes/DagreLayout.html":{},"interfaces/DagreSettings.html":{}}}],["this.dagreedges.foreach((e",{"_index":164,"title":{},"body":{"classes/DagreLayout.html":{},"interfaces/DagreSettings.html":{}}}],["this.dagrenodes",{"_index":150,"title":{},"body":{"classes/DagreLayout.html":{},"interfaces/DagreSettings.html":{}}}],["this.dagrenodes.foreach((n",{"_index":161,"title":{},"body":{"classes/DagreLayout.html":{},"interfaces/DagreSettings.html":{}}}],["this.defaultsettings",{"_index":128,"title":{},"body":{"classes/DagreLayout.html":{},"interfaces/DagreSettings.html":{}}}],["this.mousewheelfunc(event",{"_index":305,"title":{},"body":{"directives/MouseWheelDirective.html":{}}}],["this.mousewheelup.emit(event",{"_index":316,"title":{},"body":{"directives/MouseWheelDirective.html":{}}}],["this.settings",{"_index":129,"title":{},"body":{"classes/DagreLayout.html":{},"interfaces/DagreSettings.html":{}}}],["tight",{"_index":88,"title":{},"body":{"classes/DagreLayout.html":{},"interfaces/DagreSettings.html":{}}}],["time",{"_index":477,"title":{},"body":{"index.html":{}}}],["top_to_bottom",{"_index":62,"title":{},"body":{"classes/DagreLayout.html":{},"interfaces/DagreSettings.html":{},"miscellaneous/enumerations.html":{}}}],["transform",{"_index":218,"title":{},"body":{"classes/Edge.html":{},"interfaces/Layout.html":{},"interfaces/Matrix.html":{},"classes/Node.html":{}}}],["transformation",{"_index":363,"title":{},"body":{"dependencies.html":{}}}],["transforms",{"_index":216,"title":{},"body":{"classes/Edge.html":{},"interfaces/Layout.html":{},"interfaces/Matrix.html":{},"classes/Node.html":{}}}],["tree",{"_index":89,"title":{},"body":{"classes/DagreLayout.html":{},"interfaces/DagreSettings.html":{}}}],["true",{"_index":39,"title":{},"body":{"classes/DagreLayout.html":{},"interfaces/DagreSettings.html":{},"directives/MouseWheelDirective.html":{}}}],["tslib",{"_index":365,"title":{},"body":{"dependencies.html":{}}}],["two",{"_index":466,"title":{},"body":{"index.html":{}}}],["type",{"_index":24,"title":{},"body":{"classes/DagreLayout.html":{},"interfaces/DagreSettings.html":{},"classes/Edge.html":{},"interfaces/Layout.html":{},"interfaces/Matrix.html":{},"directives/MouseWheelDirective.html":{},"classes/Node.html":{},"coverage.html":{}}}],["ul",{"_index":71,"title":{},"body":{"classes/DagreLayout.html":{},"interfaces/DagreSettings.html":{},"miscellaneous/enumerations.html":{}}}],["undefined",{"_index":84,"title":{},"body":{"classes/DagreLayout.html":{},"interfaces/DagreSettings.html":{}}}],["undirected",{"_index":393,"title":{},"body":{"index.html":{}}}],["unique",{"_index":190,"title":{},"body":{"classes/Edge.html":{},"interfaces/Layout.html":{},"interfaces/Matrix.html":{},"classes/Node.html":{}}}],["unit",{"_index":457,"title":{},"body":{"index.html":{}}}],["up",{"_index":277,"title":{},"body":{"directives/MouseWheelDirective.html":{}}}],["up_left",{"_index":70,"title":{},"body":{"classes/DagreLayout.html":{},"interfaces/DagreSettings.html":{},"miscellaneous/enumerations.html":{}}}],["up_right",{"_index":72,"title":{},"body":{"classes/DagreLayout.html":{},"interfaces/DagreSettings.html":{},"miscellaneous/enumerations.html":{}}}],["update",{"_index":149,"title":{},"body":{"classes/DagreLayout.html":{},"interfaces/DagreSettings.html":{}}}],["updateedge",{"_index":18,"title":{},"body":{"classes/DagreLayout.html":{},"interfaces/DagreSettings.html":{},"interfaces/Layout.html":{}}}],["updateedge(nodes",{"_index":225,"title":{},"body":{"classes/Edge.html":{},"interfaces/Layout.html":{},"interfaces/Matrix.html":{},"classes/Node.html":{}}}],["ur",{"_index":73,"title":{},"body":{"classes/DagreLayout.html":{},"interfaces/DagreSettings.html":{},"miscellaneous/enumerations.html":{}}}],["use",{"_index":78,"title":{},"body":{"classes/DagreLayout.html":{},"interfaces/DagreSettings.html":{}}}],["used",{"_index":192,"title":{},"body":{"classes/Edge.html":{},"interfaces/Layout.html":{},"interfaces/Matrix.html":{},"classes/Node.html":{}}}],["utilize",{"_index":385,"title":{},"body":{"index.html":{}}}],["utilized",{"_index":226,"title":{},"body":{"classes/Edge.html":{},"interfaces/Layout.html":{},"interfaces/Matrix.html":{},"classes/Node.html":{}}}],["utilizing",{"_index":397,"title":{},"body":{"index.html":{}}}],["value",{"_index":20,"title":{},"body":{"classes/DagreLayout.html":{},"classes/Edge.html":{},"classes/Node.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["var",{"_index":306,"title":{},"body":{"directives/MouseWheelDirective.html":{}}}],["variable",{"_index":341,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":485,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":479,"title":{},"body":{"index.html":{},"properties.html":{}}}],["view",{"_index":468,"title":{},"body":{"index.html":{}}}],["void",{"_index":295,"title":{},"body":{"directives/MouseWheelDirective.html":{}}}],["w",{"_index":112,"title":{},"body":{"classes/DagreLayout.html":{},"interfaces/DagreSettings.html":{},"classes/Edge.html":{},"interfaces/Layout.html":{},"interfaces/Matrix.html":{},"classes/Node.html":{}}}],["wheel",{"_index":252,"title":{},"body":{"directives/MouseWheelDirective.html":{}}}],["wheen",{"_index":273,"title":{},"body":{"directives/MouseWheelDirective.html":{}}}],["width",{"_index":212,"title":{},"body":{"classes/Edge.html":{},"interfaces/Layout.html":{},"interfaces/Matrix.html":{},"classes/Node.html":{}}}],["window.event",{"_index":307,"title":{},"body":{"directives/MouseWheelDirective.html":{}}}],["within",{"_index":179,"title":{},"body":{"classes/Edge.html":{},"interfaces/Layout.html":{},"interfaces/Matrix.html":{},"classes/Node.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["without",{"_index":448,"title":{},"body":{"index.html":{}}}],["writablesignal",{"_index":51,"title":{},"body":{"classes/DagreLayout.html":{},"interfaces/DagreSettings.html":{},"classes/Edge.html":{},"interfaces/Layout.html":{},"interfaces/Matrix.html":{},"classes/Node.html":{}}}],["x",{"_index":107,"title":{},"body":{"classes/DagreLayout.html":{},"interfaces/DagreSettings.html":{},"classes/Edge.html":{},"interfaces/Layout.html":{},"interfaces/Matrix.html":{},"classes/Node.html":{}}}],["y",{"_index":109,"title":{},"body":{"classes/DagreLayout.html":{},"interfaces/DagreSettings.html":{},"classes/Edge.html":{},"interfaces/Layout.html":{},"interfaces/Matrix.html":{},"classes/Node.html":{}}}],["zone.js",{"_index":367,"title":{},"body":{"dependencies.html":{}}}],["zoom",{"_index":401,"title":{},"body":{"index.html":{}}}],["zooming",{"_index":233,"title":{},"body":{"classes/Edge.html":{},"interfaces/Layout.html":{},"interfaces/Matrix.html":{},"classes/Node.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/DagreLayout.html":{"url":"classes/DagreLayout.html","title":"class - DagreLayout","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DagreLayout\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/ngx-loom/src/lib/layouts/dagre.layout.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                createDagreGraph\n                            \n                            \n                                    Private\n                                dagreEdges\n                            \n                            \n                                    Private\n                                dagreNodes\n                            \n                            \n                                defaultSettings\n                            \n                            \n                                    Public\n                                run\n                            \n                            \n                                settings\n                            \n                            \n                                    Public\n                                updateEdge\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        createDagreGraph\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in projects/ngx-loom/src/lib/layouts/dagre.layout.ts:102\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        dagreEdges\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in projects/ngx-loom/src/lib/layouts/dagre.layout.ts:60\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        dagreNodes\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in projects/ngx-loom/src/lib/layouts/dagre.layout.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        defaultSettings\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DagreSettings\n\n                    \n                \n                \n                    \n                        Default value : {\n        orientation: Orientation.LEFT_TO_RIGHT,\n        marginX: 20,\n        marginY: 20,\n        edgePadding: 100,\n        rankPadding: 100,\n        nodePadding: 50,\n        multigraph: true,\n        compound: true\n    }\n                    \n                \n                    \n                        \n                                Defined in projects/ngx-loom/src/lib/layouts/dagre.layout.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        run\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in projects/ngx-loom/src/lib/layouts/dagre.layout.ts:62\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        settings\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DagreSettings\n\n                    \n                \n                \n                    \n                        Default value : {}\n                    \n                \n                    \n                        \n                                Defined in projects/ngx-loom/src/lib/layouts/dagre.layout.ts:57\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        updateEdge\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in projects/ngx-loom/src/lib/layouts/dagre.layout.ts:82\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import * as dagre from 'dagre';\nimport { Node, Edge } from \"../interface/loom.interface\";\nimport { Signal, WritableSignal, signal } from '@angular/core';\n\n/**\n * Enum for options of how Dagre can orient the graph.\n */\nexport enum Orientation {\n    LEFT_TO_RIGHT = 'LR',\n    RIGHT_TO_LEFT = 'RL',\n    TOP_TO_BOTTOM = 'TB',\n    BOTTOM_TO_TOM = 'BT'\n};\n\n/**\n * Enum for options of how Dagre can align the graph.\n */\nexport enum Alignment {\n    CENTER = 'C',\n    UP_LEFT = 'UL',\n    UP_RIGHT = 'UR',\n    DOWN_LEFT = 'DL',\n    DOWN_RIGHT = 'DR'\n};\n\n/**\n * The settings Dagre should use to construct the graph. \n */\nexport interface DagreSettings {\n    orientation?: Orientation;\n    marginX?: number;\n    marginY?: number;\n    edgePadding?: number;\n    rankPadding?: number;\n    nodePadding?: number;\n    align?: Alignment;\n    acyclicer?: 'greedy' | undefined;\n    ranker?: 'network-simplex' | 'tight-tree' | 'longest-path';\n    multigraph?: boolean;\n    compound?: boolean;\n};\n\n/**\n * \n */\nexport class DagreLayout {\n    defaultSettings: DagreSettings = {\n        orientation: Orientation.LEFT_TO_RIGHT,\n        marginX: 20,\n        marginY: 20,\n        edgePadding: 100,\n        rankPadding: 100,\n        nodePadding: 50,\n        multigraph: true,\n        compound: true\n    };\n    settings: DagreSettings = {};\n\n    private dagreNodes: any;\n    private dagreEdges: any;\n\n    public run = (nodes: Node[], edges: Edge[]): WritableSignal => {\n        const dagreGraph = this.createDagreGraph(nodes, edges) as any;\n        dagre.layout(dagreGraph);\n\n        for (const dagreNodeId in dagreGraph._nodes) {\n            const dagreNode = dagreGraph._nodes[dagreNodeId];\n            const node = nodes.find(n => n.id === dagreNode.id)!;\n            node.position = {\n                x: dagreNode.x,\n                y: dagreNode.y\n            };\n            node.dimension = {\n                w: dagreNode.width,\n                h: dagreNode.height\n            };\n        }\n\n        return signal({ nodes, edges });\n    };\n\n    public updateEdge = (nodes: Node[], edges: Edge[], edge: Edge): WritableSignal => {\n        const sourceNode = nodes.find(n => n.id === edge.source)!;\n        const targetNode = nodes.find(n => n.id === edge.target)!;\n\n        // determine new arrow position\n        const dir = sourceNode.position.y  {\n        const settings = Object.assign({}, this.defaultSettings, this.settings);\n        const dagreGraph = new dagre.graphlib.Graph({ compound: settings.compound, multigraph: settings.multigraph }) as any;\n\n        // Apply the settings\n        dagreGraph.setGraph({\n            rankdir: settings.orientation,\n            marginx: settings.marginX,\n            marginy: settings.marginY,\n            edgesep: settings.edgePadding,\n            ranksep: settings.rankPadding,\n            nodesep: settings.nodePadding,\n            align: settings.align,\n            acyclicer: settings.acyclicer,\n            ranker: settings.ranker,\n            multigraph: settings.multigraph,\n            compound: settings.compound\n        });\n\n        dagreGraph.setDefaultEdgeLabel(() => { });\n\n        // update all dagre nodes\n        this.dagreNodes = nodes.map(n => {\n            const node: any = Object.assign({}, n);\n            node.width = n.dimension.w || 20;\n            node.height = n.dimension.h || 20;\n            node.x = n.position.x;\n            node.y = n.position.y;\n            return node;\n        });\n        this.dagreNodes.forEach((n: any) => dagreGraph.setNode(n.id, n));\n\n        // update all dagre edges\n        this.dagreEdges = edges;\n        this.dagreEdges.forEach((e: any) => {\n            const args = settings.multigraph ? [e.source, e.target, e, e.id] : [e.source, e.target];\n            dagreGraph.setEdge(...args);\n        });\n\n        return dagreGraph;\n    }\n};\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DagreSettings.html":{"url":"interfaces/DagreSettings.html","title":"interface - DagreSettings","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  DagreSettings\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/ngx-loom/src/lib/layouts/dagre.layout.ts\n        \n\n\n            \n                Description\n            \n            \n                The settings Dagre should use to construct the graph.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            acyclicer\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            align\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            compound\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            edgePadding\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            marginX\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            marginY\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            multigraph\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            nodePadding\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            orientation\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            ranker\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            rankPadding\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        acyclicer\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        acyclicer:     \"greedy\" | undefined\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"greedy\" | undefined\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        align\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        align:         Alignment\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Alignment\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        compound\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        compound:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        edgePadding\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        edgePadding:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        marginX\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        marginX:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        marginY\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        marginY:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        multigraph\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        multigraph:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        nodePadding\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        nodePadding:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        orientation\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        orientation:         Orientation\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Orientation\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        ranker\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        ranker:     \"network-simplex\" | \"tight-tree\" | \"longest-path\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"network-simplex\" | \"tight-tree\" | \"longest-path\"\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        rankPadding\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        rankPadding:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import * as dagre from 'dagre';\nimport { Node, Edge } from \"../interface/loom.interface\";\nimport { Signal, WritableSignal, signal } from '@angular/core';\n\n/**\n * Enum for options of how Dagre can orient the graph.\n */\nexport enum Orientation {\n    LEFT_TO_RIGHT = 'LR',\n    RIGHT_TO_LEFT = 'RL',\n    TOP_TO_BOTTOM = 'TB',\n    BOTTOM_TO_TOM = 'BT'\n};\n\n/**\n * Enum for options of how Dagre can align the graph.\n */\nexport enum Alignment {\n    CENTER = 'C',\n    UP_LEFT = 'UL',\n    UP_RIGHT = 'UR',\n    DOWN_LEFT = 'DL',\n    DOWN_RIGHT = 'DR'\n};\n\n/**\n * The settings Dagre should use to construct the graph. \n */\nexport interface DagreSettings {\n    orientation?: Orientation;\n    marginX?: number;\n    marginY?: number;\n    edgePadding?: number;\n    rankPadding?: number;\n    nodePadding?: number;\n    align?: Alignment;\n    acyclicer?: 'greedy' | undefined;\n    ranker?: 'network-simplex' | 'tight-tree' | 'longest-path';\n    multigraph?: boolean;\n    compound?: boolean;\n};\n\n/**\n * \n */\nexport class DagreLayout {\n    defaultSettings: DagreSettings = {\n        orientation: Orientation.LEFT_TO_RIGHT,\n        marginX: 20,\n        marginY: 20,\n        edgePadding: 100,\n        rankPadding: 100,\n        nodePadding: 50,\n        multigraph: true,\n        compound: true\n    };\n    settings: DagreSettings = {};\n\n    private dagreNodes: any;\n    private dagreEdges: any;\n\n    public run = (nodes: Node[], edges: Edge[]): WritableSignal => {\n        const dagreGraph = this.createDagreGraph(nodes, edges) as any;\n        dagre.layout(dagreGraph);\n\n        for (const dagreNodeId in dagreGraph._nodes) {\n            const dagreNode = dagreGraph._nodes[dagreNodeId];\n            const node = nodes.find(n => n.id === dagreNode.id)!;\n            node.position = {\n                x: dagreNode.x,\n                y: dagreNode.y\n            };\n            node.dimension = {\n                w: dagreNode.width,\n                h: dagreNode.height\n            };\n        }\n\n        return signal({ nodes, edges });\n    };\n\n    public updateEdge = (nodes: Node[], edges: Edge[], edge: Edge): WritableSignal => {\n        const sourceNode = nodes.find(n => n.id === edge.source)!;\n        const targetNode = nodes.find(n => n.id === edge.target)!;\n\n        // determine new arrow position\n        const dir = sourceNode.position.y  {\n        const settings = Object.assign({}, this.defaultSettings, this.settings);\n        const dagreGraph = new dagre.graphlib.Graph({ compound: settings.compound, multigraph: settings.multigraph }) as any;\n\n        // Apply the settings\n        dagreGraph.setGraph({\n            rankdir: settings.orientation,\n            marginx: settings.marginX,\n            marginy: settings.marginY,\n            edgesep: settings.edgePadding,\n            ranksep: settings.rankPadding,\n            nodesep: settings.nodePadding,\n            align: settings.align,\n            acyclicer: settings.acyclicer,\n            ranker: settings.ranker,\n            multigraph: settings.multigraph,\n            compound: settings.compound\n        });\n\n        dagreGraph.setDefaultEdgeLabel(() => { });\n\n        // update all dagre nodes\n        this.dagreNodes = nodes.map(n => {\n            const node: any = Object.assign({}, n);\n            node.width = n.dimension.w || 20;\n            node.height = n.dimension.h || 20;\n            node.x = n.position.x;\n            node.y = n.position.y;\n            return node;\n        });\n        this.dagreNodes.forEach((n: any) => dagreGraph.setNode(n.id, n));\n\n        // update all dagre edges\n        this.dagreEdges = edges;\n        this.dagreEdges.forEach((e: any) => {\n            const args = settings.multigraph ? [e.source, e.target, e, e.id] : [e.source, e.target];\n            dagreGraph.setEdge(...args);\n        });\n\n        return dagreGraph;\n    }\n};\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Edge.html":{"url":"classes/Edge.html","title":"class - Edge","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Edge\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/ngx-loom/src/lib/interface/loom.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents a directed edge within the graph structure.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                label\n                            \n                            \n                                    Public\n                                line\n                            \n                            \n                                    Public\n                                points\n                            \n                            \n                                    Public\n                                source\n                            \n                            \n                                    Public\n                                target\n                            \n                            \n                                    Public\n                                textPath\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : nanoid()\n                    \n                \n                    \n                        \n                                Defined in projects/ngx-loom/src/lib/interface/loom.interface.ts:37\n                        \n                    \n\n            \n                \n                    A unique id, generated by nanoid(), used to differentiate this edge from others.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        label\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"\"\n                    \n                \n                    \n                        \n                                Defined in projects/ngx-loom/src/lib/interface/loom.interface.ts:49\n                        \n                    \n\n            \n                \n                    The text label for this edge.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        line\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"\"\n                    \n                \n                    \n                        \n                                Defined in projects/ngx-loom/src/lib/interface/loom.interface.ts:57\n                        \n                    \n\n            \n                \n                    The SVG string which describes the path for rendering the edge.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        points\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in projects/ngx-loom/src/lib/interface/loom.interface.ts:53\n                        \n                    \n\n            \n                \n                    A sequence of points used to generate the 'line' property.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        source\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"\"\n                    \n                \n                    \n                        \n                                Defined in projects/ngx-loom/src/lib/interface/loom.interface.ts:41\n                        \n                    \n\n            \n                \n                    The id of the node this edge starts from.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        target\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"\"\n                    \n                \n                    \n                        \n                                Defined in projects/ngx-loom/src/lib/interface/loom.interface.ts:45\n                        \n                    \n\n            \n                \n                    The id of the node this edge ends at.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        textPath\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in projects/ngx-loom/src/lib/interface/loom.interface.ts:58\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { WritableSignal } from \"@angular/core\";\nimport { nanoid } from \"nanoid\"\n\n/**\n * Represents a node within the graph structure. \n */\nexport class Node {\n    /**\n     * A unique id, generated by nanoid(), used to differentiate this node from others.\n     */\n    public id: string = nanoid();\n    /**\n     * The x and y position for this node. \n     */\n    public position: { x: number, y: number } = { x: 0, y: 0 };\n    /**\n     * The width and height for this node. \n     */\n    public dimension: { w: number, h: number } = { w: 20, h: 20 };\n    /**\n     * The text label for this node. \n     */\n    public label: string = \"\";\n    /**\n     * The css string which transforms the node to be in the correct position on the SVG.\n     */\n    public transform: string = \"\";\n};\n\n/**\n * Represents a directed edge within the graph structure.\n */\nexport class Edge {\n    /**\n     * A unique id, generated by nanoid(), used to differentiate this edge from others.\n     */\n    public id: string = nanoid();\n    /**\n     * The id of the node this edge starts from.\n     */\n    public source: string = \"\";\n    /**\n     * The id of the node this edge ends at.\n     */\n    public target: string = \"\";\n    /**\n     * The text label for this edge.\n     */\n    public label: string = \"\";\n    /**\n     * A sequence of points used to generate the 'line' property.\n     */\n    public points: { x: number, y: number }[] = [];\n    /**\n     * The SVG string which describes the path for rendering the edge.\n     */\n    public line: string = \"\";\n    public textPath: any;\n};\n\n/**\n * The interface for a 'Layout' which is used by the GraphComponent to actually render the graph.\n */\nexport interface Layout {\n    /**\n     * The settings for the layout.\n     */\n    settings?: any;\n\n    /**\n     *\n     * @param graph\n     */\n    run(nodes: Node[], edges: Edge[]): WritableSignal;\n\n    /**\n     *\n     * @param graph\n     * @param edge\n     */\n    updateEdge(nodes: Node[], edges: Edge[], edge: Edge): WritableSignal;\n};\n\n\n/**\n * Utilized internally in the Loom Component to simplify calculations for transforms relating to zooming and panning. \n */\nexport interface Matrix {\n    a: number,\n    b: number,\n    c: number,\n    d: number,\n    e: number,\n    f: number\n};\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Layout.html":{"url":"interfaces/Layout.html","title":"interface - Layout","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Layout\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/ngx-loom/src/lib/interface/loom.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                The interface for a 'Layout' which is used by the GraphComponent to actually render the graph.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            settings\n                                        \n                                \n                            \n                        \n                    \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        run\n                                    \n                                \n                                \n                                    \n                                        updateEdge\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        run\n                        \n                    \n                \n            \n            \n                \nrun(nodes: Node[], edges: Edge[])\n                \n            \n\n\n                    \n                        \n                            Defined in projects/ngx-loom/src/lib/interface/loom.interface.ts:74\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                nodes\n                                            \n                                                            Node[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                edges\n                                            \n                                                            Edge[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     WritableSignal\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateEdge\n                        \n                    \n                \n            \n            \n                \nupdateEdge(nodes: Node[], edges: Edge[], edge: Edge)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/ngx-loom/src/lib/interface/loom.interface.ts:81\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                nodes\n                                            \n                                                            Node[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                edges\n                                            \n                                                            Edge[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                edge\n                                            \n                                                            Edge\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     WritableSignal\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        settings\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        settings:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The settings for the layout.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { WritableSignal } from \"@angular/core\";\nimport { nanoid } from \"nanoid\"\n\n/**\n * Represents a node within the graph structure. \n */\nexport class Node {\n    /**\n     * A unique id, generated by nanoid(), used to differentiate this node from others.\n     */\n    public id: string = nanoid();\n    /**\n     * The x and y position for this node. \n     */\n    public position: { x: number, y: number } = { x: 0, y: 0 };\n    /**\n     * The width and height for this node. \n     */\n    public dimension: { w: number, h: number } = { w: 20, h: 20 };\n    /**\n     * The text label for this node. \n     */\n    public label: string = \"\";\n    /**\n     * The css string which transforms the node to be in the correct position on the SVG.\n     */\n    public transform: string = \"\";\n};\n\n/**\n * Represents a directed edge within the graph structure.\n */\nexport class Edge {\n    /**\n     * A unique id, generated by nanoid(), used to differentiate this edge from others.\n     */\n    public id: string = nanoid();\n    /**\n     * The id of the node this edge starts from.\n     */\n    public source: string = \"\";\n    /**\n     * The id of the node this edge ends at.\n     */\n    public target: string = \"\";\n    /**\n     * The text label for this edge.\n     */\n    public label: string = \"\";\n    /**\n     * A sequence of points used to generate the 'line' property.\n     */\n    public points: { x: number, y: number }[] = [];\n    /**\n     * The SVG string which describes the path for rendering the edge.\n     */\n    public line: string = \"\";\n    public textPath: any;\n};\n\n/**\n * The interface for a 'Layout' which is used by the GraphComponent to actually render the graph.\n */\nexport interface Layout {\n    /**\n     * The settings for the layout.\n     */\n    settings?: any;\n\n    /**\n     *\n     * @param graph\n     */\n    run(nodes: Node[], edges: Edge[]): WritableSignal;\n\n    /**\n     *\n     * @param graph\n     * @param edge\n     */\n    updateEdge(nodes: Node[], edges: Edge[], edge: Edge): WritableSignal;\n};\n\n\n/**\n * Utilized internally in the Loom Component to simplify calculations for transforms relating to zooming and panning. \n */\nexport interface Matrix {\n    a: number,\n    b: number,\n    c: number,\n    d: number,\n    e: number,\n    f: number\n};\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Matrix.html":{"url":"interfaces/Matrix.html","title":"interface - Matrix","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Matrix\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/ngx-loom/src/lib/interface/loom.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Utilized internally in the Loom Component to simplify calculations for transforms relating to zooming and panning.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            a\n                                        \n                                \n                                \n                                        \n                                            b\n                                        \n                                \n                                \n                                        \n                                            c\n                                        \n                                \n                                \n                                        \n                                            d\n                                        \n                                \n                                \n                                        \n                                            e\n                                        \n                                \n                                \n                                        \n                                            f\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        a\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        a:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        b\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        b:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        c\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        c:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        d\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        d:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        e\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        e:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        f\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        f:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { WritableSignal } from \"@angular/core\";\nimport { nanoid } from \"nanoid\"\n\n/**\n * Represents a node within the graph structure. \n */\nexport class Node {\n    /**\n     * A unique id, generated by nanoid(), used to differentiate this node from others.\n     */\n    public id: string = nanoid();\n    /**\n     * The x and y position for this node. \n     */\n    public position: { x: number, y: number } = { x: 0, y: 0 };\n    /**\n     * The width and height for this node. \n     */\n    public dimension: { w: number, h: number } = { w: 20, h: 20 };\n    /**\n     * The text label for this node. \n     */\n    public label: string = \"\";\n    /**\n     * The css string which transforms the node to be in the correct position on the SVG.\n     */\n    public transform: string = \"\";\n};\n\n/**\n * Represents a directed edge within the graph structure.\n */\nexport class Edge {\n    /**\n     * A unique id, generated by nanoid(), used to differentiate this edge from others.\n     */\n    public id: string = nanoid();\n    /**\n     * The id of the node this edge starts from.\n     */\n    public source: string = \"\";\n    /**\n     * The id of the node this edge ends at.\n     */\n    public target: string = \"\";\n    /**\n     * The text label for this edge.\n     */\n    public label: string = \"\";\n    /**\n     * A sequence of points used to generate the 'line' property.\n     */\n    public points: { x: number, y: number }[] = [];\n    /**\n     * The SVG string which describes the path for rendering the edge.\n     */\n    public line: string = \"\";\n    public textPath: any;\n};\n\n/**\n * The interface for a 'Layout' which is used by the GraphComponent to actually render the graph.\n */\nexport interface Layout {\n    /**\n     * The settings for the layout.\n     */\n    settings?: any;\n\n    /**\n     *\n     * @param graph\n     */\n    run(nodes: Node[], edges: Edge[]): WritableSignal;\n\n    /**\n     *\n     * @param graph\n     * @param edge\n     */\n    updateEdge(nodes: Node[], edges: Edge[], edge: Edge): WritableSignal;\n};\n\n\n/**\n * Utilized internally in the Loom Component to simplify calculations for transforms relating to zooming and panning. \n */\nexport interface Matrix {\n    a: number,\n    b: number,\n    c: number,\n    d: number,\n    e: number,\n    f: number\n};\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/MouseWheelDirective.html":{"url":"directives/MouseWheelDirective.html","title":"directive - MouseWheelDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  MouseWheelDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/ngx-loom/src/lib/mousewheel.directive.ts\n        \n\n\n            \n                Description\n            \n            \n                A directive to add more options to the mouse wheel events.\nhttps://github.com/SodhanaLibrary/angular2-examples/blob/master/app/mouseWheelDirective/mousewheel.directive.ts\n\n            \n\n\n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [mouseWheel]\n                    \n\n                    \n                        Standalone\n                        true\n                    \n\n\n\n                \n            \n        \n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                mouseWheelFunc\n                            \n                            \n                                    \n                                onMouseWheelChrome\n                            \n                            \n                                    \n                                onMouseWheelFirefox\n                            \n                            \n                                    \n                                onMouseWheelIE\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                mouseWheelDown\n                            \n                            \n                                mouseWheelUp\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        HostListeners\n                    \n                \n                \n                    \n                        \n                            \n                                DOMMouseScroll\n                            \n                            \n                                mousewheel\n                            \n                            \n                                onmousewheel\n                            \n                        \n                    \n                \n\n        \n    \n\n\n\n\n            \n    Outputs\n        \n            \n                \n                    \n                        \n                        mouseWheelDown\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in projects/ngx-loom/src/lib/mousewheel.directive.ts:19\n                            \n                        \n                \n                    \n                        Emits events wheen the mouse wheel is scrolled down.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        mouseWheelUp\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in projects/ngx-loom/src/lib/mousewheel.directive.ts:14\n                            \n                        \n                \n                    \n                        Emits events when the mouse wheel is scrolled up.\n\n                    \n                \n            \n        \n\n\n            \n    HostListeners    \n        \n            \n                \n                    \n                    \n                        \n                            DOMMouseScroll\n                        \n                        \n                    \n                \n            \n            \n                \n                    Arguments : '$event' \n                \n            \n\n\n            \n                \n                    Defined in projects/ngx-loom/src/lib/mousewheel.directive.ts:35\n                \n            \n\n\n            \n                \n                    Listens for mousewheel on Firefox\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    event\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            mousewheel\n                        \n                        \n                    \n                \n            \n            \n                \n                    Arguments : '$event' \n                \n            \n\n\n            \n                \n                    Defined in projects/ngx-loom/src/lib/mousewheel.directive.ts:26\n                \n            \n\n\n            \n                \n                    Listens for mousewheel on Chrome\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    event\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onmousewheel\n                        \n                        \n                    \n                \n            \n            \n                \n                    Arguments : '$event' \n                \n            \n\n\n            \n                \n                    Defined in projects/ngx-loom/src/lib/mousewheel.directive.ts:44\n                \n            \n\n\n            \n                \n                    Listens for mousewheel on IE\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    event\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        mouseWheelFunc\n                        \n                    \n                \n            \n            \n                \nmouseWheelFunc(event: any)\n                \n            \n\n\n                    \n                        \n                            Defined in projects/ngx-loom/src/lib/mousewheel.directive.ts:53\n                        \n                    \n\n\n            \n                \n                        Convert all mousewheel events above to a standard form to be emitted.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    the event that was fired\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        onMouseWheelChrome\n                        \n                    \n                \n            \n            \n                \n                        \n                    onMouseWheelChrome(event: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('mousewheel', ['$event'])\n                \n            \n\n                    \n                        \n                            Defined in projects/ngx-loom/src/lib/mousewheel.directive.ts:26\n                        \n                    \n\n\n            \n                \n                        Listens for mousewheel on Chrome\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        onMouseWheelFirefox\n                        \n                    \n                \n            \n            \n                \n                        \n                    onMouseWheelFirefox(event: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('DOMMouseScroll', ['$event'])\n                \n            \n\n                    \n                        \n                            Defined in projects/ngx-loom/src/lib/mousewheel.directive.ts:35\n                        \n                    \n\n\n            \n                \n                        Listens for mousewheel on Firefox\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        onMouseWheelIE\n                        \n                    \n                \n            \n            \n                \n                        \n                    onMouseWheelIE(event: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('onmousewheel', ['$event'])\n                \n            \n\n                    \n                        \n                            Defined in projects/ngx-loom/src/lib/mousewheel.directive.ts:44\n                        \n                    \n\n\n            \n                \n                        Listens for mousewheel on IE\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n    \n\n\n    \n        import { Directive, Output, HostListener, EventEmitter } from '@angular/core';\n\n\n/**\n * A directive to add more options to the mouse wheel events.\n * \n * https://github.com/SodhanaLibrary/angular2-examples/blob/master/app/mouseWheelDirective/mousewheel.directive.ts\n */\n@Directive({ selector: '[mouseWheel]', standalone: true })\nexport class MouseWheelDirective {\n    /**\n     * Emits events when the mouse wheel is scrolled up.\n     */\n    @Output() mouseWheelUp = new EventEmitter();\n\n    /**\n     * Emits events wheen the mouse wheel is scrolled down.\n     */\n    @Output() mouseWheelDown = new EventEmitter();\n\n    /**\n     * Listens for mousewheel on Chrome\n     * @param event \n     */\n    @HostListener('mousewheel', ['$event'])\n    onMouseWheelChrome(event: any) {\n        this.mouseWheelFunc(event);\n    }\n\n    /**\n     * Listens for mousewheel on Firefox\n     * @param event \n     */\n    @HostListener('DOMMouseScroll', ['$event'])\n    onMouseWheelFirefox(event: any) {\n        this.mouseWheelFunc(event);\n    }\n\n    /**\n     * Listens for mousewheel on IE\n     * @param event \n     */\n    @HostListener('onmousewheel', ['$event'])\n    onMouseWheelIE(event: any) {\n        this.mouseWheelFunc(event);\n    }\n\n    /**\n     * Convert all mousewheel events above to a standard form to be emitted.\n     * \n     * @param { any } event the event that was fired\n     */\n    mouseWheelFunc(event: any) {\n        var event = window.event || event; // old IE support\n        var delta = Math.max(-1, Math.min(1, (event.wheelDelta || -event.detail)));\n\n        if (delta > 0) {\n            this.mouseWheelUp.emit(event);\n        } else if (delta \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Node.html":{"url":"classes/Node.html","title":"class - Node","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Node\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/ngx-loom/src/lib/interface/loom.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents a node within the graph structure.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                dimension\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                label\n                            \n                            \n                                    Public\n                                position\n                            \n                            \n                                    Public\n                                transform\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        dimension\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Default value : { w: 20, h: 20 }\n                    \n                \n                    \n                        \n                                Defined in projects/ngx-loom/src/lib/interface/loom.interface.ts:19\n                        \n                    \n\n            \n                \n                    The width and height for this node.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : nanoid()\n                    \n                \n                    \n                        \n                                Defined in projects/ngx-loom/src/lib/interface/loom.interface.ts:11\n                        \n                    \n\n            \n                \n                    A unique id, generated by nanoid(), used to differentiate this node from others.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        label\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"\"\n                    \n                \n                    \n                        \n                                Defined in projects/ngx-loom/src/lib/interface/loom.interface.ts:23\n                        \n                    \n\n            \n                \n                    The text label for this node.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        position\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Default value : { x: 0, y: 0 }\n                    \n                \n                    \n                        \n                                Defined in projects/ngx-loom/src/lib/interface/loom.interface.ts:15\n                        \n                    \n\n            \n                \n                    The x and y position for this node.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        transform\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"\"\n                    \n                \n                    \n                        \n                                Defined in projects/ngx-loom/src/lib/interface/loom.interface.ts:27\n                        \n                    \n\n            \n                \n                    The css string which transforms the node to be in the correct position on the SVG.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { WritableSignal } from \"@angular/core\";\nimport { nanoid } from \"nanoid\"\n\n/**\n * Represents a node within the graph structure. \n */\nexport class Node {\n    /**\n     * A unique id, generated by nanoid(), used to differentiate this node from others.\n     */\n    public id: string = nanoid();\n    /**\n     * The x and y position for this node. \n     */\n    public position: { x: number, y: number } = { x: 0, y: 0 };\n    /**\n     * The width and height for this node. \n     */\n    public dimension: { w: number, h: number } = { w: 20, h: 20 };\n    /**\n     * The text label for this node. \n     */\n    public label: string = \"\";\n    /**\n     * The css string which transforms the node to be in the correct position on the SVG.\n     */\n    public transform: string = \"\";\n};\n\n/**\n * Represents a directed edge within the graph structure.\n */\nexport class Edge {\n    /**\n     * A unique id, generated by nanoid(), used to differentiate this edge from others.\n     */\n    public id: string = nanoid();\n    /**\n     * The id of the node this edge starts from.\n     */\n    public source: string = \"\";\n    /**\n     * The id of the node this edge ends at.\n     */\n    public target: string = \"\";\n    /**\n     * The text label for this edge.\n     */\n    public label: string = \"\";\n    /**\n     * A sequence of points used to generate the 'line' property.\n     */\n    public points: { x: number, y: number }[] = [];\n    /**\n     * The SVG string which describes the path for rendering the edge.\n     */\n    public line: string = \"\";\n    public textPath: any;\n};\n\n/**\n * The interface for a 'Layout' which is used by the GraphComponent to actually render the graph.\n */\nexport interface Layout {\n    /**\n     * The settings for the layout.\n     */\n    settings?: any;\n\n    /**\n     *\n     * @param graph\n     */\n    run(nodes: Node[], edges: Edge[]): WritableSignal;\n\n    /**\n     *\n     * @param graph\n     * @param edge\n     */\n    updateEdge(nodes: Node[], edges: Edge[], edge: Edge): WritableSignal;\n};\n\n\n/**\n * Utilized internally in the Loom Component to simplify calculations for transforms relating to zooming and panning. \n */\nexport interface Matrix {\n    a: number,\n    b: number,\n    c: number,\n    d: number,\n    e: number,\n    f: number\n};\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                projects/ngx-loom/src/lib/interface/loom.interface.ts\n            \n            class\n            Edge\n            \n                87 %\n                (7/8)\n            \n        \n        \n            \n                \n                projects/ngx-loom/src/lib/interface/loom.interface.ts\n            \n            class\n            Node\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                projects/ngx-loom/src/lib/interface/loom.interface.ts\n            \n            interface\n            Layout\n            \n                50 %\n                (2/4)\n            \n        \n        \n            \n                \n                projects/ngx-loom/src/lib/interface/loom.interface.ts\n            \n            interface\n            Matrix\n            \n                14 %\n                (1/7)\n            \n        \n        \n            \n                \n                projects/ngx-loom/src/lib/layouts/dagre.layout.ts\n            \n            class\n            DagreLayout\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                projects/ngx-loom/src/lib/layouts/dagre.layout.ts\n            \n            interface\n            DagreSettings\n            \n                8 %\n                (1/12)\n            \n        \n        \n            \n                \n                projects/ngx-loom/src/lib/loom/loom.component.ts\n            \n            component\n            LoomComponent\n            \n                92 %\n                (38/41)\n            \n        \n        \n            \n                \n                projects/ngx-loom/src/lib/mousewheel.directive.ts\n            \n            directive\n            MouseWheelDirective\n            \n                100 %\n                (10/10)\n            \n        \n        \n            \n                \n                projects/ngx-loom/src/lib/utils.ts\n            \n            variable\n            constrain\n            \n                100 %\n                (1/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/animations : ^17.3.0\n        \n            @angular/common : ^17.3.0\n        \n            @angular/compiler : ^17.3.0\n        \n            @angular/core : ^17.3.0\n        \n            @angular/forms : ^17.3.0\n        \n            @angular/platform-browser : ^17.3.0\n        \n            @angular/platform-browser-dynamic : ^17.3.0\n        \n            @angular/router : ^17.3.0\n        \n            d3 : ^7.8.5\n        \n            dagre : ^0.8.5\n        \n            nanoid : ^5.0.7\n        \n            rxjs : ~7.8.0\n        \n            transformation-matrix : ^2.16.1\n        \n            tslib : ^2.3.0\n        \n            zone.js : ~0.14.3\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Alignment   (projects/.../dagre.layout.ts)\n                        \n                        \n                            Orientation   (projects/.../dagre.layout.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    projects/ngx-loom/src/lib/layouts/dagre.layout.ts\n    \n        \n            \n                \n                    \n                        \n                        Alignment\n                    \n                \n                    \n                        \n                            Enum for options of how Dagre can align the graph.\n\n                        \n                    \n                        \n                            \n                                 CENTER\n                            \n                        \n                        \n                            \n                                Value : C\n                            \n                        \n                        \n                            \n                                 UP_LEFT\n                            \n                        \n                        \n                            \n                                Value : UL\n                            \n                        \n                        \n                            \n                                 UP_RIGHT\n                            \n                        \n                        \n                            \n                                Value : UR\n                            \n                        \n                        \n                            \n                                 DOWN_LEFT\n                            \n                        \n                        \n                            \n                                Value : DL\n                            \n                        \n                        \n                            \n                                 DOWN_RIGHT\n                            \n                        \n                        \n                            \n                                Value : DR\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        Orientation\n                    \n                \n                    \n                        \n                            Enum for options of how Dagre can orient the graph.\n\n                        \n                    \n                        \n                            \n                                 LEFT_TO_RIGHT\n                            \n                        \n                        \n                            \n                                Value : LR\n                            \n                        \n                        \n                            \n                                 RIGHT_TO_LEFT\n                            \n                        \n                        \n                            \n                                Value : RL\n                            \n                        \n                        \n                            \n                                 TOP_TO_BOTTOM\n                            \n                        \n                        \n                            \n                                Value : TB\n                            \n                        \n                        \n                            \n                                 BOTTOM_TO_TOM\n                            \n                        \n                        \n                            \n                                Value : BT\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nngx-loom\n\n\nngx-loom is an Angular 17 compatible library with the sole purpose of easily rendering directed graph structures. \nInstallation\nTo install, utilize the command npm i ngx-loom. \nFeatures\nngx-loom currently provides the following features: \n\nAbility to render directed (or undirected) graph structures.\nAbility to overwrite the default node and edge display styles utilizing ng-templates.\nAbility to pan and zoom the displayed graph.\nAbility to implement custom 'layouts', which allows replacing the default rendering engine.\nAbility to bind to output events raised when a graph node or edge is clicked.\nAbility to center and auto-zoom the graph utilizing exposed methods.\n\nDevelopment Setup\nTo setup for development, run the following commands within a Linux terminal. \nExample :git clone \"https://github.com/Sn00pyW00dst0ck/ng-loom.git\"\ncd ng-loom\nnpm iBuild & Run\nThere are five npm scripts available to build and run ngx-loom and its demo application. \n\nbuild:demo:dev - Builds the demo application with development configuration. \nbuild:demo:prod - Builds the demo applicaiton with production configuration.\nbuild:loom:dev - Builds the ngx-loom project with development configuration.\nbuild:loom:prod - Builds the ngx-loom project with production configuration.\nserve:demo - Serves the demo application to localhost.\n\n\n[!NOTE]\nIn order to build the demo application, first the ngx-loom project must be built. Without completing this step, building the demo application may fail. \n\nTest\nThere are four npm scripts available to test ngx-loom and its demo application. \n\ntest:demo - Runs unit tests for the demo application. \ntest:demo:headless - Runs unit tests for the demo application within headless mode. \ntest:loom - Runs unit tests for the ngx-loom project.\ntest:loom:headless - Runs unit tests for the ngx-loom project within headless mode.\n\nDocumentation\nDocumentation for ngx-loom is created utilizing Compodoc. There are two provided npm scripts to generate documentation, or you can view the docs at this page. \n\ncompodoc:build - Builds the documentation to a directory /documentation.\ncompodoc:serve - Builds and serves the documentation to localhost:5555.\n\n\n[!NOTE]\nDocumentation is not generated for the loom-demo project, only ngx-loom. Documentation is not 100% comprehensive, but will improve with time.\n\n\nThis project was generated with Angular CLI version 17.3.6.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    1 Component\n                \n            \n        \n        \n            \n                \n                    \n                    1 Directive\n                \n            \n        \n        \n            \n                \n                    \n                    3 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    3 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.0\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            constrain   (projects/.../utils.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    projects/ngx-loom/src/lib/utils.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        constrain\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (min: number, value: number, max: number): number => ((value = max) ? max : value)\n                    \n                \n\n            \n                \n                    Constrains a given value within a given min and max value.\n\n                \n            \n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
